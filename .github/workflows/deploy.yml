name: üöÄ DJ Zen Eyer - Deploy Simples (CORRIGIDO v2)

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Pular o build do Vite'
        required: false
        type: boolean
        default: false

concurrency:
  group: djzeneyer-deploy
  cancel-in-progress: false

jobs:
  build:
    name: üèóÔ∏è Build Vite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_build }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - run: npm ci --prefer-offline --no-audit
      
      - name: üé® Build Vite (COM VERIFICA√á√ÉO)
        env:
          NODE_ENV: production
          VITE_WP_SITE_URL: ${{ secrets.VITE_WP_SITE_URL }}
          VITE_WP_REST_URL: ${{ secrets.VITE_WP_REST_URL }}
          VITE_WC_CONSUMER_KEY: ${{ secrets.VITE_WC_CONSUMER_KEY }}
          VITE_WC_CONSUMER_SECRET: ${{ secrets.VITE_WC_CONSUMER_SECRET }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
        run: |
          echo "üìã Vers√µes:"
          node --version
          npm --version
          
          echo ""
          echo "üèóÔ∏è Buildando..."
          npm run build
          
          echo ""
          echo "‚úÖ Verificando dist/..."
          if [ -d "dist" ] && [ "$(find dist -type f | wc -l)" -gt 0 ]; then
            echo "‚úÖ dist/ existe e tem arquivos"
            echo "üìä Total: $(find dist -type f | wc -l) arquivos"
            echo "üì¶ Tamanho: $(du -sh dist)"
            ls -lah dist/ | head -10
          else
            echo "‚ùå ERRO: dist/ vazio ou n√£o existe!"
            ls -lah
            exit 1
          fi

  deploy:
    name: üöÄ Deploy para Hostinger
    runs-on: ubuntu-latest
    needs: build
    if: always() && (needs.build.result == 'success' || inputs.skip_build == true)
    
    steps:
      - uses: actions/checkout@v4

      - name: üîê Configura SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
          chmod 644 ~/.ssh/known_hosts
          echo "‚úÖ SSH configurado"

      - name: üß™ Testa SSH
        run: |
          ssh -p ${{ secrets.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "whoami && echo '‚úÖ SSH OK'"

      - name: üíæ Faz backup
        env:
          THEME_PATH: ${{ secrets.SSH_THEME_PATH }}
          BACKUP_PATH: ${{ secrets.SSH_BACKUP_PATH }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -p $SSH_PORT \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            $SSH_USER@$SSH_HOST bash << 'EOF'
          BACKUP_TS=$(date +%Y%m%d_%H%M%S)
          THEME_PATH="${THEME_PATH}"
          BACKUP_PATH="${BACKUP_PATH}"
          if [ -d "$THEME_PATH" ]; then
            mkdir -p "$BACKUP_PATH"
            tar -czf "$BACKUP_PATH/zentheme_${BACKUP_TS}.tar.gz" -C "$THEME_PATH" . 2>/dev/null || true
            ls -t "$BACKUP_PATH"/zentheme_*.tar.gz 2>/dev/null | tail -n +11 | xargs -r rm
            echo "‚úÖ Backup: zentheme_${BACKUP_TS}.tar.gz"
          fi
          EOF

      - name: üì¶ Sincroniza dist/
        if: hashFiles('dist/**') != ''
        env:
          THEME_PATH: ${{ secrets.SSH_THEME_PATH }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          echo "üöÄ Sincronizando dist/ para $THEME_PATH/dist/..."
          rsync -avz --delete \
            -e "ssh -p $SSH_PORT -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            dist/ \
            $SSH_USER@$SSH_HOST:$THEME_PATH/dist/
          echo "‚úÖ dist/ sincronizado"

      - name: üì¶ Sincroniza inc/
        if: hashFiles('inc/**') != ''
        env:
          THEME_PATH: ${{ secrets.SSH_THEME_PATH }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          echo "üîß Sincronizando inc/ para $THEME_PATH/inc/..."
          rsync -avz \
            -e "ssh -p $SSH_PORT -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            inc/ \
            $SSH_USER@$SSH_HOST:$THEME_PATH/inc/
          echo "‚úÖ inc/ sincronizado"

      - name: üìÑ Copia functions.php
        if: hashFiles('functions.php') != ''
        env:
          THEME_PATH: ${{ secrets.SSH_THEME_PATH }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          echo "‚öôÔ∏è Copiando functions.php para $THEME_PATH/..."
          scp -P $SSH_PORT \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            functions.php \
            $SSH_USER@$SSH_HOST:$THEME_PATH/functions.php
          echo "‚úÖ functions.php copiado"

      - name: üìÑ Copia arquivos do tema
        env:
          THEME_PATH: ${{ secrets.SSH_THEME_PATH }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          for file in style.css index.php screenshot.png; do
            if [ -f "$file" ]; then
              echo "Copiando $file para $THEME_PATH/..."
              scp -P $SSH_PORT \
                -i ~/.ssh/id_rsa \
                -o StrictHostKeyChecking=no \
                "$file" \
                $SSH_USER@$SSH_HOST:$THEME_PATH/
              echo "‚úÖ $file copiado"
            fi
          done

      - name: üîå Sincroniza plugins/
        if: hashFiles('plugins/**') != ''
        env:
          PLUGINS_PATH: ${{ secrets.SSH_PLUGINS_PATH }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          echo "üîå Sincronizando plugins/ para $PLUGINS_PATH/..."
          rsync -avz \
            -e "ssh -p $SSH_PORT -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            plugins/ \
            $SSH_USER@$SSH_HOST:$PLUGINS_PATH/
          echo "‚úÖ plugins/ sincronizado"

      - name: üìÑ Copia arquivos p√∫blicos
        env:
          PUBLIC_PATH: ${{ secrets.SSH_PUBLIC_PATH }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          echo "üìÑ Copiando arquivos p√∫blicos para $PUBLIC_PATH/..."
          for file in robots.txt ai-bots.txt favicon.ico favicon.svg apple-touch-icon.png site.webmanifest; do
            if [ -f "public/$file" ]; then
              scp -P $SSH_PORT \
                -i ~/.ssh/id_rsa \
                -o StrictHostKeyChecking=no \
                "public/$file" \
                $SSH_USER@$SSH_HOST:$PUBLIC_PATH/
              echo "‚úÖ $file copiado"
            fi
          done

      - name: üîß Ajusta permiss√µes
        env:
          THEME_PATH: ${{ secrets.SSH_THEME_PATH }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -p $SSH_PORT \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            $SSH_USER@$SSH_HOST bash << 'EOF'
          THEME_PATH="${THEME_PATH}"
          find "$THEME_PATH" -type d -exec chmod 755 {} \; 2>/dev/null || true
          find "$THEME_PATH" -type f -exec chmod 644 {} \; 2>/dev/null || true
          echo "‚úÖ Permiss√µes ajustadas (dirs=755, files=644)"
          EOF

      - name: ‚úÖ Verifica deploy
        env:
          THEME_PATH: ${{ secrets.SSH_THEME_PATH }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -p $SSH_PORT \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            $SSH_USER@$SSH_HOST bash << 'EOF'
          echo ""
          echo "üìç Verifica√ß√£o final do deploy:"
          echo "=================================="
          THEME_PATH="${THEME_PATH}"
          echo "Caminho do tema: $THEME_PATH"
          echo "Tamanho: $(du -sh "$THEME_PATH" 2>/dev/null | cut -f1)"
          echo "Total de arquivos: $(find "$THEME_PATH" -type f 2>/dev/null | wc -l)"
          echo ""
          echo "‚úÖ Arquivos cr√≠ticos:"
          [ -f "$THEME_PATH/functions.php" ] && echo "  ‚úÖ functions.php" || echo "  ‚ùå functions.php N√ÉO ENCONTRADO"
          [ -d "$THEME_PATH/inc" ] && echo "  ‚úÖ inc/" || echo "  ‚ùå inc/ N√ÉO ENCONTRADO"
          [ -d "$THEME_PATH/dist" ] && echo "  ‚úÖ dist/" || echo "  ‚ùå dist/ N√ÉO ENCONTRADO"
          echo ""
          echo "üìÇ Conte√∫do de $THEME_PATH:"
          ls -lah "$THEME_PATH" | head -15
          EOF

      - name: üßπ Limpa SSH
        if: always()
        run: rm -f ~/.ssh/id_rsa

      - name: üìä Resumo do Deploy
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ DEPLOY CONCLU√çDO COM SUCESSO!"
            echo ""
            echo "üéµ DJ Zen Eyer Theme v12.2.0"
            echo "üåê https://djzeneyer.com"
            echo "üì¶ Components Deployados:"
            echo "  ‚úì dist/ (Vite compiled React)"
            echo "  ‚úì inc/ (PHP helpers)"
            echo "  ‚úì functions.php (Theme setup)"
            echo "  ‚úì plugins/ (Custom plugins)"
            echo "  ‚úì public/ (Static assets)"
          else
            echo "‚ùå DEPLOY FALHOU"
            echo "Verifique os logs acima para detalhes"
          fi

  health-check:
    name: üè• Verifica Site
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'
    
    steps:
      - name: üåê Testa site
        run: |
          SITE_URL="${{ secrets.SITE_URL }}"
          echo "üîç Verificando: $SITE_URL"
          echo ""
          
          for i in 1 2 3; do
            HTTP=$(curl -s -o /dev/null -w "%{http_code}" -L "$SITE_URL" || echo "000")
            if [ "$HTTP" = "200" ]; then
              echo "‚úÖ Site online (HTTP $HTTP)"
              exit 0
            fi
            echo "‚è≥ Tentativa $i/3 (HTTP $HTTP)..."
            sleep 5
          done
          
          echo "‚ö†Ô∏è Site pode estar em cache ou aguardando reboot"
