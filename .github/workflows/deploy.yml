name: üöÄ Production Deploy
on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
concurrency:
  group: production-deploy
  cancel-in-progress: false
permissions:
  contents: read
  deployments: write
env:
  NODE_VERSION: '20'
  SSH_HOST: '147.79.84.222'
  SSH_PORT: '65002'
  SSH_USER: 'u790739895'
jobs:
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      status: ${{ job.status }}
      hash: ${{ steps.hash.outputs.value }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - id: hash
        run: echo "value=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - run: npm ci --prefer-offline --no-audit
      - run: npm run generate-sitemaps 2>&1 || true
        continue-on-error: true
      - run: npm run build
        env:
          NODE_ENV: production
          VITE_WP_SITE_URL: https://djzeneyer.com
          VITE_WP_REST_URL: https://djzeneyer.com/wp-json/
          VITE_WC_CONSUMER_KEY: ${{ secrets.VITE_WC_CONSUMER_KEY }}
          VITE_WC_CONSUMER_SECRET: ${{ secrets.VITE_WC_CONSUMER_SECRET }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
      - run: |
          [ -d dist ] && [ -f dist/index.html ] && [ -s dist/index.html ] || exit 1
      - uses: actions/upload-artifact@v4
        with:
          name: build-${{ steps.hash.outputs.value }}
          path: dist/
          retention-days: 7
  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build
    if: needs.build.result == 'success'
    environment:
      name: production
      url: https://djzeneyer.com
    steps:
      - uses: actions/checkout@v4
      - name: Validate environment variables
        run: |
          [ -z "${{ env.SSH_HOST }}" ] && echo "‚ùå SSH_HOST n√£o definido" && exit 1
          [ -z "${{ env.SSH_PORT }}" ] && echo "‚ùå SSH_PORT n√£o definido" && exit 1
          [ -z "${{ env.SSH_USER }}" ] && echo "‚ùå SSH_USER n√£o definido" && exit 1
          echo "‚úÖ Vari√°veis de ambiente validadas"
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ needs.build.outputs.hash }}
          path: dist/
      - name: Verify artifact downloaded
        run: |
          echo "Verificando se dist/ foi baixado:"
          ls -la dist/ || exit 1
          [ -f dist/index.html ] || exit 1
          echo "‚úÖ Build artifact pronto: $(du -sh dist | cut -f1)"
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ env.SSH_PORT }} -H ${{ env.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          # Teste de conex√£o SSH
          ssh -p ${{ env.SSH_PORT }} -o ConnectTimeout=10 ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "echo 'Conex√£o SSH estabelecida com sucesso!' || exit 1"
      - name: Backup theme
        run: |
          ssh -p ${{ env.SSH_PORT }} -o ConnectTimeout=10 ${{ env.SSH_USER }}@${{ env.SSH_HOST }} << 'BACKUP'
          THEME_DIR="/home/u790739895/domains/djzeneyer.com/public_html/wp-content/themes/zentheme"
          if [ -d "$THEME_DIR" ]; then
            BACKUP_TS=$(date +%Y%m%d_%H%M%S)
            mkdir -p /home/u790739895/backups
            tar -czf "/home/u790739895/backups/theme_${BACKUP_TS}.tar.gz" "$THEME_DIR/"
            ls -lh "/home/u790739895/backups/theme_${BACKUP_TS}.tar.gz" || exit 1
            cd /home/u790739895/backups
            ls -t theme_*.tar.gz | tail -n +6 | xargs -r rm
          else
            echo "‚ùå Diret√≥rio do tema n√£o encontrado. Backup n√£o realizado."
            exit 1
          fi
          BACKUP
      - name: Deploy theme
        run: |
          rsync -avz --delete --checksum \
            -e "ssh -p ${{ env.SSH_PORT }} -o ConnectTimeout=10" \
            --exclude='.git*' \
            --exclude='node_modules' \
            --exclude='dist' \
            --exclude='src' \
            --exclude='.github' \
            --exclude='scripts' \
            --exclude='package*.json' \
            --exclude='tsconfig*.json' \
            --exclude='vite.config.*' \
            --exclude='public' \
            --exclude='*.md' \
            --exclude='.env*' \
            --exclude='.DS_Store' \
            --exclude='*.log' \
            ./ \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:/home/u790739895/domains/djzeneyer.com/public_html/wp-content/themes/zentheme/
      - name: Deploy build to dist/
        run: |
          echo "Deploying build ($(du -sh dist | cut -f1))..."
          rsync -avz --delete --checksum \
            -e "ssh -p ${{ env.SSH_PORT }} -o ConnectTimeout=10" \
            dist/ \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:/home/u790739895/domains/djzeneyer.com/public_html/wp-content/themes/zentheme/dist/ || exit 1
          echo "‚úÖ Build deployed"
      - name: Deploy plugins
        if: hashFiles('plugins/**') != ''
        run: |
          REPO_PLUGINS=$(find plugins -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)
          if [ -z "$REPO_PLUGINS" ]; then
            echo "‚ÑπÔ∏è Nenhum plugin no reposit√≥rio"
            exit 0
          fi
          echo "üì§ Deploying plugins..."
          for plugin in $REPO_PLUGINS; do
            rsync -avz -e "ssh -p ${{ env.SSH_PORT }} -o ConnectTimeout=10" \
              "plugins/$plugin/" \
              "${{ env.SSH_USER }}@${{ env.SSH_HOST }}:/home/u790739895/domains/djzeneyer.com/public_html/wp-content/plugins/$plugin/"
          done
          echo "‚úÖ Plugins deployed"
      - name: Deploy sitemaps
        if: hashFiles('dist/sitemap*.xml') != ''
        run: |
          rsync -avz -e "ssh -p ${{ env.SSH_PORT }} -o ConnectTimeout=10" \
            --include='sitemap*.xml' --exclude='*' \
            dist/ ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:/home/u790739895/domains/djzeneyer.com/public_html/
          echo "‚úÖ Sitemaps deployed"
      - name: Verify deployment
        run: |
          ssh -p ${{ env.SSH_PORT }} -o ConnectTimeout=10 ${{ env.SSH_USER }}@${{ env.SSH_HOST }} << 'VERIFY'
          set -e
          echo "üîç Verificando deploy..."
          THEME_DIR="/home/u790739895/domains/djzeneyer.com/public_html/wp-content/themes/zentheme"
          [ -d "$THEME_DIR" ] || { echo "‚ùå Diret√≥rio do tema n√£o encontrado"; exit 1; }
          [ -f "$THEME_DIR/functions.php" ] || { echo "‚ùå functions.php n√£o encontrado"; exit 1; }
          [ -f "$THEME_DIR/index.php" ] || { echo "‚ùå index.php n√£o encontrado"; exit 1; }
          [ -d "$THEME_DIR/dist" ] || { echo "‚ùå dist/ n√£o encontrado"; exit 1; }
          [ -f "$THEME_DIR/dist/index.html" ] || { echo "‚ùå dist/index.html n√£o encontrado"; exit 1; }
          echo "‚úÖ Todos os arquivos verificados com sucesso!"
          VERIFY
      - name: Debug on failure
        if: failure()
        run: |
          echo "üîç Debugging deployment failure..."
          ssh -p ${{ env.SSH_PORT }} -o ConnectTimeout=10 ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "ls -la /home/u790739895/domains/djzeneyer.com/public_html/wp-content/themes/zentheme/"
          echo "üîç Verificando logs do servidor..."
          ssh -p ${{ env.SSH_PORT }} -o ConnectTimeout=10 ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "tail -n 50 /home/u790739895/domains/djzeneyer.com/public_html/wp-content/debug.log"
      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/id_rsa
  health-check:
    name: üè• Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'
    steps:
      - name: Check site accessibility
        run: |
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -L https://djzeneyer.com)
          [ "$HTTP_CODE" = "200" ] && echo "‚úÖ Site is accessible" || { echo "‚ö†Ô∏è HTTP $HTTP_CODE"; exit 1; }
      - name: Check WordPress REST API
        run: |
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://djzeneyer.com/wp-json/)
          [ "$HTTP_CODE" = "200" ] && echo "‚úÖ REST API is accessible" || echo "‚ö†Ô∏è HTTP $HTTP_CODE"
      - name: Final status
        run: echo "üéâ Deployment completed successfully!"
