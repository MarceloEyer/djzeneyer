# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üöÄ DJ ZEN EYER - PRODUCTION DEPLOY (ENTERPRISE-GRADE - FIXED)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
name: üöÄ Production Deploy
on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip build step'
        required: false
        type: boolean
        default: false
      force_deploy:
        description: 'Force deploy (skip validations)'
        required: false
        type: boolean
        default: false
concurrency:
  group: production-deploy
  cancel-in-progress: false
permissions:
  contents: read
  deployments: write
  actions: read
env:
  NODE_VERSION: '20'
  SSH_HOST: '147.79.84.222'
  SSH_PORT: '65002'
  SSH_USER: 'u790739895'
  REMOTE_ROOT: '/home/u790739895/public_html'
  THEME_NAME: 'zentheme'
jobs:
  validate:
    name: ‚úÖ Pre-build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should_build: ${{ steps.changes.outputs.should_build }}
      commit_hash: ${{ steps.hash.outputs.value }}
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: üîñ Generate commit hash
        id: hash
        run: echo "value=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: üîç Check changed files
        id: changes
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD 2>/dev/null | grep -E '\.(ts|tsx|js|jsx|css|scss|json|html)$' || echo "force")
          if [ -n "$CHANGED_FILES" ] || [ "${{ inputs.force_deploy }}" = "true" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes detected - build required"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No build changes detected"
          fi
      - name: üìã Validate required files
        run: |
          REQUIRED_FILES=(
            "package.json"
            "vite.config.ts"
            "tsconfig.json"
            "src/main.tsx"
            "functions.php"
          )
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Required file missing: $file"
              exit 1
            fi
          done
          echo "‚úÖ All required files present"
      - name: üîê Validate secrets
        run: |
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "‚ùå SSH_PRIVATE_KEY secret not set!"
            exit 1
          fi
          echo "‚úÖ Critical secrets validated"
  build:
    name: üèóÔ∏è Build Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: validate
    if: |
      needs.validate.outputs.should_build == 'true' && 
      !inputs.skip_build
    outputs:
      build_status: ${{ job.status }}
      build_size: ${{ steps.size.outputs.value }}
      timestamp: ${{ steps.timestamp.outputs.value }}
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: ‚è∞ Generate timestamp
        id: timestamp
        run: echo "value=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT
      - name: üì¶ Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci --prefer-offline --no-audit
          echo "‚úÖ Dependencies installed"
      - name: üî® Build production bundle
        run: |
          echo "Building production bundle..."
          npm run build
        env:
          NODE_ENV: production
          VITE_WP_SITE_URL: https://djzeneyer.com
          VITE_WP_REST_URL: https://djzeneyer.com/wp-json/
          VITE_WC_CONSUMER_KEY: ${{ secrets.VITE_WC_CONSUMER_KEY }}
          VITE_WC_CONSUMER_SECRET: ${{ secrets.VITE_WC_CONSUMER_SECRET }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
      - name: ‚úÖ Validate build output
        run: |
          echo "Validating build output..."
          if [ ! -d "dist" ]; then
            echo "‚ùå dist/ directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå dist/index.html not found"
            exit 1
          fi
          JS_COUNT=$(find dist -name '*.js' 2>/dev/null | wc -l)
          DIST_SIZE=$(du -sh dist/ | cut -f1)
          echo "üìä Build contents:"
          echo "  - JS files: $JS_COUNT"
          echo "  - Total size: $DIST_SIZE"
          if [ "$JS_COUNT" -eq 0 ]; then
            echo "‚ùå No JavaScript files found!"
            exit 1
          fi
          echo "‚úÖ Build validation passed"
      - name: üìä Calculate build size
        id: size
        run: |
          SIZE=$(du -sh dist/ | cut -f1)
          echo "value=$SIZE" >> $GITHUB_OUTPUT
      - name: üì§ Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ needs.validate.outputs.commit_hash }}
          path: |
            dist/
            plugins/
            inc/
            *.php
            style.css
            screenshot.png
          retention-days: 7
          if-no-files-found: error
  deploy:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [validate, build]
    if: |
      always() && 
      (needs.build.result == 'success' || inputs.skip_build) &&
      needs.validate.result == 'success'
    environment:
      name: production
      url: https://djzeneyer.com
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
      - name: üì• Download build artifact
        if: ${{ !inputs.skip_build }}
        uses: actions/download-artifact@v4
        with:
          name: build-${{ needs.validate.outputs.commit_hash }}
          path: ./
      - name: üîê Setup SSH (HARDENED)
        run: |
          echo "Setting up SSH..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p 65002 147.79.84.222 >> ~/.ssh/known_hosts 2>&1
          chmod 644 ~/.ssh/known_hosts
          cat > ~/.ssh/config << 'EOF'
          Host prod
            HostName 147.79.84.222
            Port 65002
            User u790739895
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking accept-new
            ConnectTimeout 10
            ServerAliveInterval 30
            ServerAliveCountMax 3
            Compression yes
            LogLevel DEBUG3
          EOF
          chmod 600 ~/.ssh/config
          echo "‚úÖ SSH configured"
      - name: üß™ Test SSH connection
        run: |
          set -x
          ssh -vvv prod "echo '‚úÖ SSH connection successful' && pwd && whoami"
      - name: üìÅ Prepare remote environment
        run: |
          set -x
          ssh -vvv prod bash << 'BASH_EOF'
          set -ex
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_DIR="/home/u790739895/backups/deploy_${TIMESTAMP}"
          THEME_PATH="/home/u790739895/public_html/wp-content/themes/zentheme"
          echo "üì¶ Creating backup directory..."
          mkdir -p "${BACKUP_DIR}"
          if [ -d "${THEME_PATH}" ]; then
            echo "üì¶ Backing up current theme..."
            tar -czf "${BACKUP_DIR}/theme_backup.tar.gz" -C "${THEME_PATH}" . 2>/dev/null || true
          fi
          echo "üìÅ Creating directory structure..."
          mkdir -p "${THEME_PATH}"/{dist,inc}
          mkdir -p "/home/u790739895/public_html/wp-content/plugins"
          echo "üßπ Cleaning old backups..."
          cd "/home/u790739895/backups"
          ls -t | tail -n +6 | xargs -r rm -rf 2>/dev/null || true
          echo "${BACKUP_DIR}" > /tmp/last_backup_path.txt
          echo "‚úÖ Remote environment ready"
          BASH_EOF
      - name: üöÄ Deploy React build (force sync dist)
        run: |
          set -x
          echo "üì§ Deploying React build with forced sync..."
          rsync -avz --delete --progress \
            -e "ssh -p 65002 -vvv" \
            dist/ \
            u790739895@147.79.84.222:/home/u790739895/public_html/wp-content/themes/zentheme/dist/
          echo "‚úÖ React build deployed"
      - name: üìù Deploy theme files (force sync PHP/CSS/inc)
        run: |
          set -x
          echo "üì§ Deploying theme files with forced sync..."
          # Sync root theme files (PHP, CSS, screenshot) and delete removed ones
          rsync -avz --delete --progress \
            -e "ssh -p 65002 -vvv" \
            --include='*.php' \
            --include='style.css' \
            --include='screenshot.png' \
            --exclude='*' \
            ./ \
            u790739895@147.79.84.222:/home/u790739895/public_html/wp-content/themes/zentheme/
          # Sync inc/ directory fully (create/delete/update)
          if [ -d "inc" ]; then
            rsync -avz --delete --progress \
              -e "ssh -p 65002 -vvv" \
              inc/ \
              u790739895@147.79.84.222:/home/u790739895/public_html/wp-content/themes/zentheme/inc/
          fi
          echo "‚úÖ Theme files deployed"
      - name: üîå Deploy plugins (force sync)
        if: hashFiles('plugins/**') != ''
        run: |
          set -x
          echo "üì§ Deploying plugins with forced sync..."
          if [ -d "plugins" ]; then
            rsync -avz --delete --progress \
              -e "ssh -p 65002 -vvv" \
              plugins/ \
              u790739895@147.79.84.222:/home/u790739895/public_html/wp-content/plugins/
            echo "‚úÖ Plugins deployed"
          fi
      - name: üìÑ Deploy public assets (safe list, force sync each)
        run: |
          set -x
          echo "üì§ Deploying public assets..."
          SAFE_FILES=(
            "robots.txt"
            "favicon.ico"
            "favicon.svg"
            "apple-touch-icon.png"
            "site.webmanifest"
          )
          for file in "${SAFE_FILES[@]}"; do
            if [ -f "public/$file" ]; then
              rsync -avz --progress \
                -e "ssh -p 65002 -vvv" \
                "public/$file" \
                u790739895@147.79.84.222:/home/u790739895/public_html/
            fi
          done
          echo "‚úÖ Public assets deployed"
      - name: ‚úÖ Verify deployment
        run: |
          set -x
          echo "üîç Verifying deployment..."
          ssh -vvv prod bash << 'BASH_EOF'
          set -ex
          THEME_PATH="/home/u790739895/public_html/wp-content/themes/zentheme"
          echo ""
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "üìä DEPLOYMENT VERIFICATION"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          if [ -d "${THEME_PATH}/dist" ]; then
            echo "‚úÖ Dist directory exists"
            DIST_SIZE=$(du -sh "${THEME_PATH}/dist" | cut -f1)
            FILE_COUNT=$(find "${THEME_PATH}/dist" -type f | wc -l)
            echo "   Size: ${DIST_SIZE}, Files: ${FILE_COUNT}"
          else
            echo "‚ùå Dist directory MISSING"
            exit 1
          fi
          [ -f "${THEME_PATH}/functions.php" ] && echo "‚úÖ functions.php" || echo "‚ö†Ô∏è functions.php missing"
          [ -f "${THEME_PATH}/style.css" ] && echo "‚úÖ style.css" || echo "‚ö†Ô∏è style.css missing"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "‚úÖ VERIFICATION COMPLETE"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          BASH_EOF
      - name: üß™ Create/Update test file via SSH
        run: |
          set -x
          echo "üß™ Creating/updating test file on server..."
          ssh -vvv prod bash << 'BASH_EOF'
          set -euo pipefail
          THEME_PATH="/home/u790739895/public_html/wp-content/themes/zentheme"
          FILE_PATH="${THEME_PATH}/test.txt"
          echo "Ensuring permissions and directory exist..."
          mkdir -p "$THEME_PATH"
          # Try to write the file; if permission denied, try with sudo if available
          if echo 'Deploy test' > "$FILE_PATH" 2>/tmp/write_err.log; then
            echo "‚úÖ Wrote test file: $FILE_PATH"
          else
            ERR=$(cat /tmp/write_err.log || true)
            echo "‚ö†Ô∏è Direct write failed: $ERR"
            if command -v sudo >/dev/null 2>&1; then
              echo "Attempting with sudo..."
              echo 'Deploy test' | sudo tee "$FILE_PATH" >/dev/null && sudo chmod 664 "$FILE_PATH" && echo "‚úÖ Wrote with sudo"
            else
              echo "‚ùå Cannot escalate privileges and write failed"
              exit 1
            fi
          fi
          ls -l "$FILE_PATH" || true
          echo "File content:" && head -n 5 "$FILE_PATH" || true
          BASH_EOF
      - name: üßπ Cleanup SSH
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa ~/.ssh/config
          echo "üßπ SSH credentials cleaned"
      - name: üìä Deployment summary
        if: always()
        run: |
          echo ""
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "‚úÖ DEPLOY SUCCESSFUL"
          echo ""
          echo "üåê Site: https://djzeneyer.com"
          echo "üì¶ Build: ${{ needs.validate.outputs.commit_hash }}"
          echo "üìä Size: ${{ needs.build.outputs.build_size }}"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
  health-check:
    name: üè• Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: deploy
    if: needs.deploy.result == 'success'
    steps:
      - name: üîç Check site accessibility
        run: |
          echo "Checking https://djzeneyer.com..."
          for i in {1..3}; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -L --max-time 15 https://djzeneyer.com)
            if [ "$HTTP_CODE" = "200" ]; then
              echo "‚úÖ Site is accessible (HTTP $HTTP_CODE)"
              exit 0
            else
              echo "‚ö†Ô∏è Attempt $i: HTTP $HTTP_CODE"
              sleep 3
            fi
          done
          echo "‚ùå Site might be down or slow to respond"
          exit 1</textarea></section></main></body></html> }„Äë}```} Turmoil and Freedom. How to
