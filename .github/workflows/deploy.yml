name: üöÄ Production Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: production-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

env:
  NODE_VERSION: '20'
  SSH_HOST: '147.79.84.222'
  SSH_PORT: '65002'
  SSH_USER: 'u790739895'
  REMOTE_THEME_PATH: './wp-content/themes/zentheme'
  REMOTE_PLUGINS_PATH: './wp-content/plugins'
  BASE_URL: 'https://djzeneyer.com'

jobs:
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      build_status: ${{ job.status }}
      sitemaps_ok: ${{ steps.sitemaps.outcome }}

    steps:
      - name: ‚ö° Checkout
        uses: actions/checkout@v4

      - name: üîç Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci --prefer-offline --no-audit 2>&1 | tail -20

      - name: üó∫Ô∏è Generate Sitemaps
        id: sitemaps
        run: npm run generate-sitemaps 2>&1 | tee sitemap.log
        continue-on-error: true

      - name: üèóÔ∏è Build Production
        id: build
        run: npm run build
        env:
          NODE_ENV: production
          VITE_WP_SITE_URL: https://djzeneyer.com
          VITE_WP_REST_URL: https://djzeneyer.com/wp-json/
          VITE_WC_CONSUMER_KEY: ${{ secrets.VITE_WC_CONSUMER_KEY }}
          VITE_WC_CONSUMER_SECRET: ${{ secrets.VITE_WC_CONSUMER_SECRET }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}

      - name: üì§ Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 7
          compression-level: 9

  deploy:
    name: üöÄ Deploy
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: production
      url: https://djzeneyer.com

    steps:
      - name: ‚ö° Checkout
        uses: actions/checkout@v4

      - name: üì• Download Build
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: dist/

      - name: üîë Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -p ${{ env.SSH_PORT }} -H ${{ env.SSH_HOST }} >> ~/.ssh/known_hosts 2>&1

      - name: üß™ Test SSH Connection
        id: ssh_test
        run: |
          set +e
          ssh -i ~/.ssh/deploy_key \
            -p ${{ env.SSH_PORT }} \
            -o StrictHostKeyChecking=no \
            -o ConnectTimeout=10 \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }} \
            "mkdir -p ${{ env.REMOTE_THEME_PATH }}/dist ${{ env.REMOTE_PLUGINS_PATH }}" > /tmp/ssh_test.log 2>&1
          
          SSH_RESULT=$?
          if [ $SSH_RESULT -eq 0 ]; then
            echo "SSH_OK=true" >> $GITHUB_OUTPUT
            echo "‚úÖ SSH connection successful"
          else
            echo "SSH_OK=false" >> $GITHUB_OUTPUT
            echo "‚ùå SSH connection failed!"
            cat /tmp/ssh_test.log
          fi
          set -e

      - name: ‚öõÔ∏è Deploy React Build
        id: react_deploy
        if: steps.ssh_test.outputs.SSH_OK == 'true'
        run: |
          set +e
          echo "üì§ Uploading React build..."
          rsync -avz --delete \
            -e "ssh -i ~/.ssh/deploy_key -p ${{ env.SSH_PORT }} -o StrictHostKeyChecking=no" \
            ./dist/ \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.REMOTE_THEME_PATH }}/dist/ > /tmp/react_deploy.log 2>&1
          
          REACT_RESULT=$?
          if [ $REACT_RESULT -eq 0 ]; then
            echo "‚úÖ React build deployed"
          else
            echo "‚ùå React deployment failed"
            tail -20 /tmp/react_deploy.log
            exit $REACT_RESULT
          fi

      - name: üé® Deploy Theme Files
        id: theme_deploy
        if: steps.ssh_test.outputs.SSH_OK == 'true'
        run: |
          set +e
          echo "üì§ Uploading theme files..."
          rsync -avz --delete \
            -e "ssh -i ~/.ssh/deploy_key -p ${{ env.SSH_PORT }} -o StrictHostKeyChecking=no" \
            --exclude='.git*' \
            --exclude='node_modules' \
            --exclude='dist' \
            --exclude='public' \
            --exclude='src' \
            --exclude='.github' \
            --exclude='scripts' \
            --exclude='package*.json' \
            --exclude='tsconfig*.json' \
            --exclude='vite.config.*' \
            --exclude='eslint.config.*' \
            --exclude='postcss.config.*' \
            --exclude='tailwind.config.*' \
            --exclude='*.md' \
            --exclude='wp-content' \
            --exclude='plugins' \
            --exclude='.env*' \
            ./ \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.REMOTE_THEME_PATH }}/ > /tmp/theme_deploy.log 2>&1
          
          THEME_RESULT=$?
          if [ $THEME_RESULT -eq 0 ]; then
            echo "‚úÖ Theme files deployed"
          else
            echo "‚ùå Theme deployment failed"
            tail -20 /tmp/theme_deploy.log
            exit $THEME_RESULT
          fi

      - name: üß© Deploy Custom Plugins
        id: plugins_deploy
        if: steps.ssh_test.outputs.SSH_OK == 'true'
        run: |
          set +e
          PLUGIN_COUNT=0
          
          if [ -d "plugins" ] && [ "$(ls -A plugins/)" ]; then
            PLUGIN_COUNT=$(ls -d plugins/*/ 2>/dev/null | wc -l)
            echo "üì¶ Deploying $PLUGIN_COUNT plugin(s)..."
            
            for plugin_dir in plugins/*/; do
              plugin_name=$(basename "$plugin_dir")
              echo "  üöÄ $plugin_name"
              rsync -avz \
                -e "ssh -i ~/.ssh/deploy_key -p ${{ env.SSH_PORT }} -o StrictHostKeyChecking=no" \
                "$plugin_dir" \
                ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.REMOTE_PLUGINS_PATH }}/ > /tmp/plugin_${plugin_name}.log 2>&1
              
              if [ $? -eq 0 ]; then
                echo "    ‚úÖ Success"
              else
                echo "    ‚ùå Failed"
              fi
            done
            
            echo "PLUGIN_COUNT=$PLUGIN_COUNT" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No custom plugins to deploy"
            echo "PLUGIN_COUNT=0" >> $GITHUB_OUTPUT
          fi

      - name: üó∫Ô∏è Deploy Sitemaps and Assets
        id: assets_deploy
        if: steps.ssh_test.outputs.SSH_OK == 'true'
        run: |
          set +e
          
          echo "üì§ Uploading sitemaps..."
          rsync -avz \
            -e "ssh -i ~/.ssh/deploy_key -p ${{ env.SSH_PORT }} -o StrictHostKeyChecking=no" \
            --include='sitemap*.xml' \
            --exclude='*' \
            ./dist/ \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:./ > /tmp/sitemaps.log 2>&1
          
          echo "üì§ Uploading robots.txt and assets..."
          rsync -avz \
            -e "ssh -i ~/.ssh/deploy_key -p ${{ env.SSH_PORT }} -o StrictHostKeyChecking=no" \
            --include='robots.txt' \
            --include='favicon*' \
            --include='*.png' \
            --include='*.ico' \
            --include='*.svg' \
            --include='*.webmanifest' \
            --exclude='*' \
            ./dist/ \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:./ >> /tmp/sitemaps.log 2>&1
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Sitemaps and assets deployed"
          else
            echo "‚ö†Ô∏è Some assets may not have deployed"
          fi

      - name: üîç Verify Deployment
        id: verify
        if: steps.ssh_test.outputs.SSH_OK == 'true'
        run: |
          echo "üîç Verifying deployment..."
          
          ssh -i ~/.ssh/deploy_key \
            -p ${{ env.SSH_PORT }} \
            -o StrictHostKeyChecking=no \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }} << 'VERIFY_SCRIPT'
          
          echo "‚úÖ Directories exist:"
          [ -d ./wp-content/themes/zentheme ] && echo "   Theme: YES" || echo "   Theme: NO"
          [ -d ./wp-content/themes/zentheme/dist ] && echo "   Dist:  YES" || echo "   Dist:  NO"
          
          echo "‚úÖ Files deployed:"
          THEME_FILES=$(find ./wp-content/themes/zentheme -type f 2>/dev/null | wc -l)
          SITEMAPS=$(ls -1 sitemap*.xml 2>/dev/null | wc -l)
          ROBOTS=$([ -f robots.txt ] && echo "YES" || echo "NO")
          
          echo "   Theme files: $THEME_FILES"
          echo "   Sitemaps: $SITEMAPS"
          echo "   Robots.txt: $ROBOTS"
          
          VERIFY_SCRIPT

      - name: üßπ Cleanup
        if: always()
        run: rm -f ~/.ssh/deploy_key

      - name: üìä Generate Report
        if: always()
        run: |
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_SHORT="${COMMIT_SHA:0:7}"
          
          cat > DEPLOY_REPORT.md << 'EOF'
          # üöÄ DJ ZEN EYER - DEPLOYMENT REPORT
          
          ## üìã Information
          - **Site:** https://djzeneyer.com
          - **Commit:** ${{ github.sha }}
          - **Short:** $COMMIT_SHORT
          - **Author:** @${{ github.actor }}
          - **Branch:** ${{ github.ref_name }}
          - **Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ## ‚úÖ Status
          - Build: ${{ needs.build.outputs.build_status }}
          - Sitemaps: ${{ needs.build.outputs.sitemaps_ok }}
          - SSH: ${{ steps.ssh_test.outputs.SSH_OK }}
          - React: ${{ steps.react_deploy.outcome }}
          - Theme: ${{ steps.theme_deploy.outcome }}
          - Plugins: OK
          - Assets: OK
          
          ## üìö Next Steps
          1. Visit: https://djzeneyer.com
          2. Hard refresh: Ctrl+Shift+R
          3. Check sitemaps: https://djzeneyer.com/sitemap_index.xml
          4. Check admin: https://djzeneyer.com/wp-admin/
          
          ## üîó Logs
          - GitHub Actions: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          EOF
          
          cat DEPLOY_REPORT.md

      - name: üì§ Upload Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: DEPLOY_REPORT.md
          retention-days: 30

      - name: üéØ Final Check
        if: always()
        run: |
          echo ""
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          if [[ "${{ steps.react_deploy.outcome }}" == "success" || "${{ steps.react_deploy.outcome }}" == "skipped" ]] && \
             [[ "${{ steps.theme_deploy.outcome }}" == "success" || "${{ steps.theme_deploy.outcome }}" == "skipped" ]]; then
            echo "‚úÖ DEPLOYMENT SUCCESSFUL!"
          else
            echo "‚ö†Ô∏è DEPLOYMENT COMPLETED WITH ISSUES"
          fi
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
