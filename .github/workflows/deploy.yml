# ═══════════════════════════════════════════════════════════════════════════════
# 🚀 DJ ZEN EYER - PRODUCTION DEPLOY (FULL SITE RSYNC)
# ═══════════════════════════════════════════════════════════════════════════════
name: 🚀 Production Deploy
on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip build step'
        required: false
        type: boolean
        default: false
      force_deploy:
        description: 'Force deploy (skip validations)'
        required: false
        type: boolean
        default: false

concurrency:
  group: production-deploy
  cancel-in-progress: false

permissions:
  contents: read
  deployments: write
  actions: read

env:
  NODE_VERSION: '20'
  SSH_HOST: '147.79.84.222'
  SSH_PORT: '65002'
  SSH_USER: 'u790739895'
  REMOTE_ROOT: '/home/u790739895/public_html'
  THEME_NAME: 'zentheme'

jobs:
  validate:
    name: ✅ Pre-build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should_build: ${{ steps.changes.outputs.should_build }}
      commit_hash: ${{ steps.hash.outputs.value }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: 🔖 Generate commit hash
        id: hash
        run: echo "value=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: 🔍 Check changed files
        id: changes
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD 2>/dev/null | grep -E '\.(ts|tsx|js|jsx|css|scss|json|html|php)$' || echo "force")
          if [ -n "$CHANGED_FILES" ] || [ "${{ inputs.force_deploy }}" = "true" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "✅ Changes detected - build required"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No build changes detected"
          fi
      - name: 📋 Validate required files
        run: |
          REQUIRED_FILES=(
            "package.json"
            "vite.config.ts"
            "tsconfig.json"
            "src/main.tsx"
            "functions.php"
          )
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
          done
          echo "✅ All required files present"
      - name: 🔐 Validate secrets
        run: |
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "❌ SSH_PRIVATE_KEY secret not set!"
            exit 1
          fi
          echo "✅ Critical secrets validated"

  build:
    name: 🏗️ Build Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: validate
    if: |
      needs.validate.outputs.should_build == 'true' && 
      !inputs.skip_build
    outputs:
      build_status: ${{ job.status }}
      build_size: ${{ steps.size.outputs.value }}
      timestamp: ${{ steps.timestamp.outputs.value }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: ⏰ Generate timestamp
        id: timestamp
        run: echo "value=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT
      - name: 📦 Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci --prefer-offline --no-audit
          echo "✅ Dependencies installed"
      - name: 🔨 Build production bundle
        run: |
          echo "Building production bundle..."
          npm run build
        env:
          NODE_ENV: production
          VITE_WP_SITE_URL: https://djzeneyer.com
          VITE_WP_REST_URL: https://djzeneyer.com/wp-json/
          VITE_WC_CONSUMER_KEY: ${{ secrets.VITE_WC_CONSUMER_KEY }}
          VITE_WC_CONSUMER_SECRET: ${{ secrets.VITE_WC_CONSUMER_SECRET }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
      - name: ✅ Validate build output
        run: |
          echo "Validating build output..."
          if [ ! -d "dist" ]; then
            echo "❌ dist/ directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "❌ dist/index.html not found"
            exit 1
          fi
          JS_COUNT=$(find dist -name '*.js' 2>/dev/null | wc -l)
          DIST_SIZE=$(du -sh dist/ | cut -f1)
          echo "📊 Build contents:"
          echo "  - JS files: $JS_COUNT"
          echo "  - Total size: $DIST_SIZE"
          if [ "$JS_COUNT" -eq 0 ]; then
            echo "❌ No JavaScript files found!"
            exit 1
          fi
          echo "✅ Build validation passed"
      - name: 📊 Calculate build size
        id: size
        run: |
          SIZE=$(du -sh dist/ | cut -f1)
          echo "value=$SIZE" >> $GITHUB_OUTPUT
      - name: 📤 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ needs.validate.outputs.commit_hash }}
          path: |
            dist/
            plugins/
            inc/
            wp-content/themes/zentheme/**
            *.php
            style.css
            screenshot.png
            public/
          retention-days: 7
          if-no-files-found: warn

  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [validate, build]
    if: |
      always() && 
      (needs.build.result == 'success' || inputs.skip_build) &&
      needs.validate.result == 'success'
    environment:
      name: production
      url: https://djzeneyer.com
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      - name: 📥 Download build artifact
        if: ${{ !inputs.skip_build }}
        uses: actions/download-artifact@v4
        with:
          name: build-${{ needs.validate.outputs.commit_hash }}
          path: ./
      - name: 🔐 Setup SSH (HARDENED)
        run: |
          echo "Setting up SSH..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ env.SSH_PORT }} ${{ env.SSH_HOST }} >> ~/.ssh/known_hosts 2>&1
          chmod 644 ~/.ssh/known_hosts
          cat > ~/.ssh/config << 'EOF'
          Host prod
            HostName 147.79.84.222
            Port 65002
            User u790739895
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking accept-new
            ConnectTimeout 10
            ServerAliveInterval 30
            ServerAliveCountMax 3
            Compression yes
            LogLevel DEBUG3
          EOF
          chmod 600 ~/.ssh/config
          echo "✅ SSH configured"
      - name: 🧪 Test SSH connection
        run: |
          set -x
          ssh -vvv prod "echo '✅ SSH connection successful' && pwd && whoami"
      - name: 📁 Prepare remote environment
        run: |
          set -x
          ssh -vvv prod bash << 'BASH_EOF'
          set -ex
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_DIR="/home/u790739895/backups/deploy_${TIMESTAMP}"
          THEME_PATH="/home/u790739895/public_html/wp-content/themes/zentheme"
          echo "📦 Creating backup directory..."
          mkdir -p "${BACKUP_DIR}"
          if [ -d "${THEME_PATH}" ]; then
            echo "📦 Backing up current theme..."
            tar -czf "${BACKUP_DIR}/theme_backup.tar.gz" -C "${THEME_PATH}" . 2>/dev/null || true
          fi
          echo "📁 Creating directory structure..."
          mkdir -p "${THEME_PATH}"/{dist,inc,assets}
          mkdir -p "/home/u790739895/public_html/wp-content/plugins"
          echo "🧹 Cleaning old backups..."
          cd "/home/u790739895/backups"
          ls -t | tail -n +6 | xargs -r rm -rf 2>/dev/null || true
          echo "${BACKUP_DIR}" > /tmp/last_backup_path.txt
          echo "✅ Remote environment ready"
          BASH_EOF
      - name: 🚀 Sync full theme directory (incl. dist, inc, assets, php, css)
        run: |
          set -x
          RSYNC_SSH="ssh -p ${SSH_PORT} -vvv"
          RSYNC_BASE_OPTS="-avz --delete --progress --chmod=Du=rwx,Dg=rwx,Do=rx,Fu=rw,Fg=rw,Fo=r --no-perms --no-owner --no-group"
          # Sync entire theme directory while enforcing rules
          rsync $RSYNC_BASE_OPTS \
            -e "$RSYNC_SSH" \
            --include='dist/***' \
            --include='inc/***' \
            --include='assets/***' \
            --include='**/*.php' \
            --include='style.css' \
            --include='screenshot.png' \
            --exclude='.git/***' \
            --exclude='node_modules/***' \
            --exclude='**/.DS_Store' \
            --exclude='**/*.map' \
            --exclude='**/README*' \
            --exclude='**/README.*' \
            ./ \
            ${SSH_USER}@${SSH_HOST}:${REMOTE_ROOT}/wp-content/themes/${THEME_NAME}/
          echo "✅ Theme directory synced"
      - name: 🔌 Sync plugins directory (full, keep structure)
        if: hashFiles('plugins/**') != ''
        run: |
          set -x
          RSYNC_SSH="ssh -p ${SSH_PORT} -vvv"
          RSYNC_BASE_OPTS="-avz --delete --progress --chmod=Du=rwx,Dg=rwx,Do=rx,Fu=rw,Fg=rw,Fo=r --no-perms --no-owner --no-group"
          rsync $RSYNC_BASE_OPTS \
            -e "$RSYNC_SSH" \
            --exclude='.git/***' \
            --exclude='**/.DS_Store' \
            plugins/ \
            ${SSH_USER}@${SSH_HOST}:${REMOTE_ROOT}/wp-content/plugins/
          echo "✅ Plugins synced"
      - name: 📄 Sync public assets (safe list + common assets)
        run: |
          set -x
          RSYNC_SSH="ssh -p ${SSH_PORT} -vvv"
          RSYNC_BASE_OPTS="-avz --progress --chmod=Du=rwx,Dg=rwx,Do=rx,Fu=rw,Fg=rw,Fo=r --no-perms --no-owner --no-group"
          # Safe top-level files
          for f in robots.txt favicon.ico favicon.svg apple-touch-icon.png site.webmanifest; do
            if [ -f "public/$f" ]; then
              rsync $RSYNC_BASE_OPTS -e "$RSYNC_SSH" "public/$f" ${SSH_USER}@${SSH_HOST}:${REMOTE_ROOT}/
            fi
          done
          # Entire public directory (images, fonts, etc.)
          if [ -d public ]; then
            rsync $RSYNC_BASE_OPTS \
              -e "$RSYNC_SSH" \
              --exclude='.git/***' \
              --exclude='**/.DS_Store' \
              public/ \
              ${SSH_USER}@${SSH_HOST}:${REMOTE_ROOT}/
          fi
          echo "✅ Public assets synced"
      - name: ✅ Verify deployment
        run: |
          set -x
          ssh -vvv prod bash << 'BASH_EOF'
          set -ex
          THEME_PATH="/home/u790739895/public_html/wp-content/themes/zentheme"
          echo ""
          echo "════════════════════════════════════════"
          echo "📊 DEPLOYMENT VERIFICATION"
          echo "════════════════════════════════════════"
          if [ -d "${THEME_PATH}/dist" ]; then
            echo "✅ Dist directory exists"
            DIST_SIZE=$(du -sh "${THEME_PATH}/dist" | cut -f1)
            FILE_COUNT=$(find "${THEME_PATH}/dist" -type f | wc -l)
            echo "   Size: ${DIST_SIZE}, Files: ${FILE_COUNT}"
          else
            echo "❌ Dist directory MISSING"
            exit 1
          fi
          [ -f "${THEME_PATH}/functions.php" ] && echo "✅ functions.php" || echo "⚠️ functions.php missing"
          [ -f "${THEME_PATH}/style.css" ] && echo "✅ style.css" || echo "⚠️ style.css missing"
          echo "════════════════════════════════════════"
          echo "✅ VERIFICATION COMPLETE"
          echo "════════════════════════════════════════"
          BASH_EOF
      - name: 🧪 Create/Update test file via SSH
        run: |
          set -x
          echo "🧪 Creating/updating test file on server..."
          ssh -vvv prod bash << 'BASH_EOF'
          set -euo pipefail
          THEME_PATH="/home/u790739895/public_html/wp-content/themes/zentheme"
          FILE_PATH="${THEME_PATH}/test.txt"
          echo "Ensuring permissions and directory exist..."
          mkdir -p "$THEME_PATH"
          if echo 'Deploy test' > "$FILE_PATH" 2>/tmp/write_err.log; then
            echo "✅ Wrote test file: $FILE_PATH"
          else
            ERR=$(cat /tmp/write_err.log || true)
            echo "⚠️ Direct write failed: $ERR"
            if command -v sudo >/dev/null 2>&1; then
              echo "Attempting with sudo..."
              echo 'Deploy test' | sudo tee "$FILE_PATH" >/dev/null && sudo chmod 664 "$FILE_PATH" && echo "✅ Wrote with sudo"
            else
              echo "❌ Cannot escalate privileges and write failed"
              exit 1
            fi
          fi
          ls -l "$FILE_PATH" || true
          echo "File content:" && head -n 5 "$FILE_PATH" || true
          BASH_EOF
      - name: 🧹 Cleanup SSH
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa ~/.ssh/config
          echo "🧹 SSH credentials cleaned"
      - name: 📊 Deployment summary
        if: always()
        run: |
          echo ""
          echo "════════════════════════════════════════════════════════"
          echo "✅ DEPLOY SUCCESSFUL"
          echo ""
          echo "🌐 Site: https://djzeneyer.com"
          echo "📦 Build: ${{ needs.validate.outputs.commit_hash }}"
          echo "📊 Size: ${{ needs.build.outputs.build_size }}"
          echo "════════════════════════════════════════════════════════"

  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: deploy
    if: needs.deploy.result == 'success'
    steps:
      - name: 🔍 Check site accessibility
        run: |
          echo "Checking https://djzeneyer.com..."
          for i in {1..3}; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -L --max-time 15 https://djzeneyer.com)
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Site is accessible (HTTP
