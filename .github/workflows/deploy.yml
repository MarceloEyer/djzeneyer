name: Build and Deploy to Hostinger

on:
  push:
    branches:
      - main

permissions:
  contents: read

env:
  NODE_VERSION: '18'
  REMOTE_DIR: /wp-content/themes/zentheme/dist
  ZIP_NAME: site-dist.zip

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-build-

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          VITE_WP_SITE_URL: https://djzeneyer.com
          VITE_WP_REST_URL: https://djzeneyer.com/wp-json/
          VITE_WC_CONSUMER_KEY: ${{ secrets.VITE_WC_CONSUMER_KEY }}
          VITE_WC_CONSUMER_SECRET: ${{ secrets.VITE_WC_CONSUMER_SECRET }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}

      - name: Zip dist
        run: |
          rm -f "${ZIP_NAME}"
          cd dist
          zip -r "../${ZIP_NAME}" . -q
          cd ..

      - name: Upload artifact (dist zip)
        uses: actions/upload-artifact@v4
        with:
          name: dist-zip
          path: ${{ env.ZIP_NAME }}

  deploy:
    name: Deploy (SFTP mirror)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-zip
          path: ./deploy

      - name: Install lftp and unzip
        run: sudo apt-get update -y && sudo apt-get install -y lftp unzip

      - name: Prepare local unpack
        run: |
          rm -rf deploy_unzip
          mkdir -p deploy_unzip
          unzip -q ./deploy/${{ env.ZIP_NAME }} -d ./deploy_unzip
          ls -la deploy_unzip | head -n 20

      - name: Deploy via SFTP mirror (only-newer, parallel)
        env:
          FTP_HOST: ${{ secrets.FTP_SERVER }}
          FTP_USER: ${{ secrets.FTP_USERNAME }}
          FTP_PASS: ${{ secrets.FTP_PASSWORD }}
          FTP_PORT: ${{ secrets.FTP_PORT || '22' }}
          REMOTE_DIR: ${{ env.REMOTE_DIR }}
        run: |
          set -euo pipefail
          RETRIES=3
          for i in $(seq 1 $RETRIES); do
            echo "SFTP deploy attempt #$i"
            lftp -u "$FTP_USER","$FTP_PASS" -p "$FTP_PORT" sftp://"$FTP_HOST" -e "
              set -e;
              mkdir -p $REMOTE_DIR;
              mirror -R --only-newer --delete --parallel=8 ./deploy_unzip $REMOTE_DIR;
              ls -la $REMOTE_DIR | head -n 20;
              bye
            " && break || (echo "Attempt $i failed, retrying..." && sleep $((i*2)))
          done

      - name: Optional: Purge LiteSpeed Cache
        env:
          LSCACHE_PURGE_URL: ${{ secrets.LSCACHE_PURGE_URL }}
          LSCACHE_PURGE_TOKEN: ${{ secrets.LSCACHE_PURGE_TOKEN }}
        run: |
          if [ -n "${LSCACHE_PURGE_URL:-}" ] && [ -n "${LSCACHE_PURGE_TOKEN:-}" ]; then
            echo "Purging LiteSpeed cache..."
            curl -fsS -X PURGE "${LSCACHE_PURGE_URL}" -H "Authorization: Bearer ${LSCACHE_PURGE_TOKEN}" || echo "Purge failed"
          else
            echo "LSCache purge secrets missing; skipping."
          fi

      - name: Verify remote dist listing
        env:
          FTP_HOST: ${{ secrets.FTP_SERVER }}
          FTP_USER: ${{ secrets.FTP_USERNAME }}
          FTP_PASS: ${{ secrets.FTP_PASSWORD }}
          FTP_PORT: ${{ secrets.FTP_PORT || '22' }}
          REMOTE_DIR: ${{ env.REMOTE_DIR }}
        run: |
          lftp -u "$FTP_USER","$FTP_PASS" -p "$FTP_PORT" sftp://"$FTP_HOST" -e "
            set -e;
            cls -1 $REMOTE_DIR | head -n 30;
            bye
          "
