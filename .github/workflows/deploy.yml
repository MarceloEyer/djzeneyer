name: 🚀 DJ Zen Eyer - Deploy (Bolt.new + WordPress Headless)

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip npm build'
        required: false
        type: boolean
        default: false

concurrency:
  group: djzeneyer-production-deploy
  cancel-in-progress: false

permissions:
  contents: read

env:
  NODE_VERSION: '20'
  SSH_PORT: '65002'  # ✅ PORTA CUSTOMIZADA HOSTINGER

jobs:
  build:
    name: 🏗️ Build Vite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_build }}
    
    outputs:
      hash: ${{ steps.hash.outputs.value }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - id: hash
        run: echo "value=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - run: npm ci --prefer-offline --no-audit

      - name: 🎨 Build Vite
        env:
          NODE_ENV: production
          VITE_WP_SITE_URL: ${{ secrets.VITE_WP_SITE_URL }}
          VITE_WP_REST_URL: ${{ secrets.VITE_WP_REST_URL }}
          VITE_WC_CONSUMER_KEY: ${{ secrets.VITE_WC_CONSUMER_KEY }}
          VITE_WC_CONSUMER_SECRET: ${{ secrets.VITE_WC_CONSUMER_SECRET }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
        run: npm run build

      - uses: actions/upload-artifact@v4
        with:
          name: djz-dist-${{ steps.hash.outputs.value }}
          path: dist/
          retention-days: 1

  deploy:
    name: 🚀 Deploy para Hostinger
    runs-on: ubuntu-latest
    needs: build
    if: always() && (needs.build.result == 'success' || inputs.skip_build)

    steps:
      - uses: actions/checkout@v4

      - if: ${{ !inputs.skip_build }}
        uses: actions/download-artifact@v4
        with:
          name: djz-dist-${{ needs.build.outputs.hash }}
          path: dist/

      # ✅ SSH SETUP - COM PORTA 65002 FIXA
      - name: 🔐 Setup SSH (Hostinger Port 65002)
        run: |
          echo "🔧 SSH Setup (Port: ${{ env.SSH_PORT }})..."
          
          # Step 1: Criar diretório
          mkdir -p ~/.ssh && echo "✅ SSH directory criado"
          
          # Step 2: Escrever chave privada
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          if [ ! -f ~/.ssh/id_rsa ]; then
            echo "❌ Falha ao criar SSH key"
            exit 1
          fi
          echo "✅ SSH key criada"
          
          # Step 3: Permissões
          chmod 600 ~/.ssh/id_rsa
          echo "✅ Permissões: 600"
          
          # Step 4: Known hosts (COM PORTA 65002)
          ssh-keyscan -p ${{ env.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
          chmod 644 ~/.ssh/known_hosts
          echo "✅ Known hosts configurado (porta: ${{ env.SSH_PORT }})"
          
          ls -la ~/.ssh/
          echo "✅ SSH setup complete"

      # ✅ TEST SSH (COM PORTA 65002)
      - name: 🧪 Test SSH (Port 65002)
        run: |
          echo "Testando SSH na porta 65002..."
          ssh -v -p ${{ env.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=~/.ssh/known_hosts \
            -o ConnectTimeout=15 \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "whoami && pwd && echo '✅ SSH OK - Port 65002 works!'" || {
            echo "❌ SSH connection failed on port 65002"
            exit 1
          }

      # ✅ BACKUP
      - name: 💾 Backup Theme
        run: |
          ssh -p ${{ env.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash << 'EOF'
          
          BACKUP_TS=$(date +%Y%m%d_%H%M%S)
          THEME_PATH="${{ secrets.SSH_THEME_PATH }}"
          BACKUP_PATH="${{ secrets.SSH_BACKUP_PATH }}"
          
          if [ -d "$THEME_PATH" ]; then
            mkdir -p "$BACKUP_PATH"
            tar -czf "$BACKUP_PATH/zentheme_${BACKUP_TS}.tar.gz" \
              -C "$THEME_PATH" . 2>/dev/null || true
            ls -t "$BACKUP_PATH"/zentheme_*.tar.gz 2>/dev/null | tail -n +11 | xargs -r rm
            echo "✅ Backup: zentheme_${BACKUP_TS}.tar.gz"
          fi
          EOF

      # ✅ DEPLOY THEME
      - name: 📦 Deploy Theme
        run: |
          mkdir -p clean_theme
          
          if [ -d "dist/" ]; then
            cp -r dist/* clean_theme/
          fi
          
          if [ -d "inc/" ]; then
            mkdir -p clean_theme/inc
            cp -r inc/* clean_theme/inc/
          fi
          
          if [ -f "functions.php" ]; then
            cp functions.php clean_theme/
          fi
          
          for file in style.css index.php screenshot.png; do
            [ -f "$file" ] && cp "$file" clean_theme/
          done
          
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='node_modules/' \
            --exclude='src/' \
            --exclude='public/' \
            --exclude='plugins/' \
            --exclude='vite.config.*' \
            --exclude='tsconfig*.json' \
            --exclude='package*.json' \
            --exclude='*.env*' \
            --exclude='.github/' \
            --exclude='.*' \
            --exclude='index.html' \
            -e "ssh -p ${{ env.SSH_PORT }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            clean_theme/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_THEME_PATH }}/
          
          echo "✅ Theme deployed"

      # ✅ DEPLOY PLUGINS
      - name: 🔌 Deploy Plugins
        if: hashFiles('plugins/**') != ''
        run: |
          rsync -avz \
            --exclude='*.env' \
            --exclude='.git/' \
            -e "ssh -p ${{ env.SSH_PORT }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ./plugins/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PLUGINS_PATH }}/
          
          echo "✅ Plugins deployed"

      # ✅ DEPLOY PUBLIC
      - name: 📄 Deploy Public Assets
        run: |
          for file in robots.txt ai-bots.txt favicon.ico favicon.svg \
                      apple-touch-icon.png site.webmanifest; do
            if [ -f "public/$file" ]; then
              scp -P ${{ env.SSH_PORT }} \
                -i ~/.ssh/id_rsa \
                -o StrictHostKeyChecking=no \
                "public/$file" \
                ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PUBLIC_PATH }}/
            fi
          done
          echo "✅ Public assets deployed"

      # ✅ FIX PERMISSIONS
      - name: 🔧 Fix Permissions
        run: |
          ssh -p ${{ env.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash << 'EOF'
          find ${{ secrets.SSH_THEME_PATH }} -type d -exec chmod 755 {} \; 2>/dev/null || true
          find ${{ secrets.SSH_THEME_PATH }} -type f -exec chmod 644 {} \; 2>/dev/null || true
          echo "✅ Permissions fixed"
          EOF

      # ✅ CLEANUP
      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -rf clean_theme
          echo "✅ Cleanup done"

      # ✅ SUMMARY
      - name: 📊 Deploy Summary
        if: always()
        run: |
          echo ""
          echo "╔════════════════════════════════════╗"
          if [ "${{ job.status }}" = "success" ]; then
            echo "║  ✅ DEPLOYMENT SUCCESSFUL        ║"
          else
            echo "║  ❌ DEPLOYMENT FAILED            ║"
          fi
          echo "╚════════════════════════════════════╝"
          echo ""
          echo "🎵 DJ Zen Eyer Theme v12.2.0"
          echo "🌐 https://djzeneyer.com"
          echo "🔌 SSH Port: 65002"
          echo ""

  # ✅ HEALTH CHECK
  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'

    steps:
      - name: 🌐 Verify Site
        run: |
          for i in 1 2 3; do
            HTTP=$(curl -s -o /dev/null -w "%{http_code}" -L "${{ secrets.SITE_URL }}" || echo "000")
            if [ "$HTTP" = "200" ]; then
              echo "✅ Site online (HTTP $HTTP)"
              exit 0
            fi
            [ $i -lt 3 ] && sleep 5
          done
          echo "⚠️  Site check pending"
