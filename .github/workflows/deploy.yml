# Nome da sua automação
name: Build and Deploy to Hostinger

# Gatilhos de execução
on:
  # 1. Deploy automático ao fazer push na branch 'main'
  push:
    branches:
      - main
  # 2. Permite deploy manual pela interface do GitHub Actions
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      # 1. Baixa o código do seu repositório
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Configura o ambiente Node.js com cache embutido (mais simples e eficiente)
      - name: Setup Node.js with Cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # Esta linha ativa o cache para o npm, substituindo o passo extra de 'actions/cache'
          cache: 'npm'

      # 3. Instala as dependências de forma otimizada
      - name: Install Dependencies
        run: npm ci

      # 4. Cria a pasta 'dist' com os arquivos finais
      - name: Build Project
        run: npm run build

      # 5. Envia o conteúdo da pasta 'dist' para o seu servidor
      - name: FTP Deploy
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          security: 'loose'
          
          # Origem: A pasta 'dist' que acabamos de criar
          local-dir: ./dist/
          
          # Destino: O caminho exato e funcional para a sua conta
          server-dir: public_html/wp-content/themes/zentheme/dist/


          
          # Limpa o destino antes de enviar os arquivos novos (nosso método mais simples)
          dangerous-clean-slate: true
