name: üöÄ DJ Zen Eyer - Deploy Simples
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Pular o build do Vite'
        required: false
        type: boolean
        default: false

# ‚úÖ Concorr√™ncia: Evita deploys simult√¢neos
concurrency:
  group: djzeneyer-deploy
  cancel-in-progress: false

jobs:
  build:
    name: üèóÔ∏è Build Vite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_build }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci --prefer-offline --no-audit
      - name: Build Vite
        env:
          NODE_ENV: production
          VITE_WP_SITE_URL: ${{ secrets.VITE_WP_SITE_URL }}
          VITE_WP_REST_URL: ${{ secrets.VITE_WP_REST_URL }}
          VITE_WC_CONSUMER_KEY: ${{ secrets.VITE_WC_CONSUMER_KEY }}
          VITE_WC_CONSUMER_SECRET: ${{ secrets.VITE_WC_CONSUMER_SECRET }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
        run: npm run build

  deploy:
    name: üöÄ Deploy para Hostinger
    runs-on: ubuntu-latest
    needs: build
    if: always() && (needs.build.result == 'success' || inputs.skip_build)
    steps:
      - uses: actions/checkout@v4

      # üîê Configura SSH
      - name: Configura SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # üíæ Backup do tema (antes de qualquer altera√ß√£o)
      - name: Faz backup
        run: |
          ssh -p ${{ secrets.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash << 'EOF'
          BACKUP_TS=$(date +%Y%m%d_%H%M%S)
          THEME_PATH="${{ secrets.SSH_THEME_PATH }}"
          BACKUP_PATH="${{ secrets.SSH_BACKUP_PATH }}"
          if [ -d "$THEME_PATH" ]; then
            mkdir -p "$BACKUP_PATH"
            tar -czf "$BACKUP_PATH/zentheme_${BACKUP_TS}.tar.gz" -C "$THEME_PATH" .
            ls -t "$BACKUP_PATH"/zentheme_*.tar.gz 2>/dev/null | tail -n +11 | xargs -r rm
            echo "‚úÖ Backup: zentheme_${BACKUP_TS}.tar.gz"
          fi
          EOF

      # üì¶ Sincroniza dist/ ‚Üí zentheme/dist/ (com --delete)
      - name: Sincroniza dist/
        run: |
          rsync -avz --delete \
            -e "ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            dist/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_THEME_PATH }}/dist/

      # üì¶ Sincroniza inc/ ‚Üí zentheme/inc/ (sem --delete)
      - name: Sincroniza inc/
        run: |
          rsync -avz \
            -e "ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            inc/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_THEME_PATH }}/inc/

      # üìÑ Copia functions.php ‚Üí zentheme/functions.php
      - name: Copia functions.php
        run: |
          scp -P ${{ secrets.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            functions.php \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_THEME_PATH }}/functions.php

      # üìÑ Copia style.css, index.php, etc.
      - name: Copia arquivos do tema
        run: |
          for file in style.css index.php screenshot.png; do
            if [ -f "$file" ]; then
              scp -P ${{ secrets.SSH_PORT }} \
                -i ~/.ssh/id_rsa \
                -o StrictHostKeyChecking=no \
                "$file" \
                ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_THEME_PATH }}/
              echo "‚úÖ $file copiado"
            fi
          done

      # üîå Sincroniza plugins/ ‚Üí wp-content/plugins/ (sem --delete)
      - name: Sincroniza plugins/
        if: hashFiles('plugins/**') != ''
        run: |
          rsync -avz \
            -e "ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            plugins/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PLUGINS_PATH }}/

      # üìÑ Copia arquivos p√∫blicos (whitelist)
      - name: Copia arquivos p√∫blicos
        run: |
          for file in robots.txt ai-bots.txt favicon.ico favicon.svg apple-touch-icon.png site.webmanifest; do
            if [ -f "public/$file" ]; then
              scp -P ${{ secrets.SSH_PORT }} \
                -i ~/.ssh/id_rsa \
                -o StrictHostKeyChecking=no \
                "public/$file" \
                ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PUBLIC_PATH }}/
              echo "‚úÖ $file copiado"
            fi
          done

      # üîß Ajusta permiss√µes
      - name: Ajusta permiss√µes
        run: |
          ssh -p ${{ secrets.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash << 'EOF'
          find "${{ secrets.SSH_THEME_PATH }}" -type d -exec chmod 755 {} \;
          find "${{ secrets.SSH_THEME_PATH }}" -type f -exec chmod 644 {} \;
          echo "‚úÖ Permiss√µes ajustadas (dirs=755, files=644)"
          EOF

      # ‚úÖ Verifica deploy
      - name: Verifica deploy
        run: |
          ssh -p ${{ secrets.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash << 'EOF'
          echo "üìç Verifica√ß√£o do deploy:"
          echo "================================"
          echo "Tema: ${{ secrets.SSH_THEME_PATH }}"
          echo "Tamanho: $(du -sh "${{ secrets.SSH_THEME_PATH }}" 2>/dev/null | cut -f1)"
          echo ""
          echo "‚úÖ Arquivos-chave:"
          [ -f "${{ secrets.SSH_THEME_PATH }}/functions.php" ] && echo "  ‚úÖ functions.php" || echo "  ‚ùå functions.php MISSING"
          [ -d "${{ secrets.SSH_THEME_PATH }}/inc" ] && echo "  ‚úÖ inc/" || echo "  ‚ùå inc/ MISSING"
          [ -d "${{ secrets.SSH_THEME_PATH }}/dist" ] && echo "  ‚úÖ dist/" || echo "  ‚ùå dist/ MISSING"
          EOF

      # üßπ Limpa SSH
      - name: Limpa SSH
        if: always()
        run: rm -f ~/.ssh/id_rsa

  # üè• Health Check (ap√≥s deploy)
  health-check:
    name: üè• Verifica Site
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'
    steps:
      - name: Testa site
        run: |
          for i in 1 2 3; do
            HTTP=$(curl -s -o /dev/null -w "%{http_code}" -L "${{ secrets.SITE_URL }}" || echo "000")
            if [ "$HTTP" = "200" ]; then
              echo "‚úÖ Site online (HTTP $HTTP)"
              exit 0
            fi
            echo "‚è≥ Tentativa $i/3..."
            sleep 5
          done
          echo "‚ö†Ô∏è Site pode estar em cache"
