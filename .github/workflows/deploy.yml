name: üöÄ Deploy Bolt.new + WordPress Headless

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'

  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip npm build (reuse artifact)'
        required: false
        type: boolean
        default: false

# ‚úÖ MISTRAL: Concurrency protection
concurrency:
  group: production-deploy
  cancel-in-progress: false

permissions:
  contents: read

# ‚úÖ MISTRAL: Env vars centralizadas
env:
  NODE_VERSION: '20'

jobs:
  # ‚úÖ MISTRAL: Build separado com output hash
  build:
    name: üèóÔ∏è Build Vite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_build }}
    
    outputs:
      hash: ${{ steps.hash.outputs.value }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - id: hash
        run: echo "value=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - run: npm ci --prefer-offline --no-audit

      # ‚úÖ GROK/HYBRID: Build com TODOS os secrets Vite
      - name: Build Vite (WordPress Headless)
        env:
          NODE_ENV: production
          # URLs WordPress Headless
          VITE_WP_SITE_URL: ${{ secrets.VITE_WP_SITE_URL }}
          VITE_WP_REST_URL: ${{ secrets.VITE_WP_REST_URL }}
          # WooCommerce API
          VITE_WC_CONSUMER_KEY: ${{ secrets.VITE_WC_CONSUMER_KEY }}
          VITE_WC_CONSUMER_SECRET: ${{ secrets.VITE_WC_CONSUMER_SECRET }}
          # Google Client
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
        run: npm run build

      # ‚úÖ MISTRAL: Upload artifact
      - uses: actions/upload-artifact@v4
        with:
          name: dist-${{ steps.hash.outputs.value }}
          path: dist/
          retention-days: 1

  deploy:
    name: üöÄ Deploy (Theme + Plugins + Public)
    runs-on: ubuntu-latest
    needs: build
    if: always() && (needs.build.result == 'success' || inputs.skip_build)

    steps:
      - uses: actions/checkout@v4

      # ‚úÖ MISTRAL: Download artifact
      - if: ${{ !inputs.skip_build }}
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.build.outputs.hash }}
          path: dist/

      # ‚úÖ GROK/HYBRID: SSH setup
      - name: üîê Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SSH_PORT || '22' }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null

      - name: üß™ Test SSH Connection
        run: ssh -p ${{ secrets.SSH_PORT || '22' }} -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo '‚úÖ SSH OK'"

      # ‚úÖ MISTRAL: Backup antes de qualquer coisa
      - name: üíæ Backup tema (antes de deploy)
        run: |
          ssh -p ${{ secrets.SSH_PORT || '22' }} -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash << 'EOF'
          BACKUP_TS=$(date +%Y%m%d_%H%M%S)
          THEME_PATH="${{ secrets.SSH_THEME_PATH }}"
          BACKUP_PATH="${{ secrets.SSH_BACKUP_PATH }}"
          
          if [ -d "$THEME_PATH" ]; then
            mkdir -p "$BACKUP_PATH"
            tar -czf "$BACKUP_PATH/theme_${BACKUP_TS}.tar.gz" -C "$THEME_PATH" . 2>/dev/null || true
            # Mant√©m √∫ltimos 10 backups
            ls -t "$BACKUP_PATH"/theme_*.tar.gz 2>/dev/null | tail -n +11 | xargs -r rm
            echo "‚úÖ Backup: theme_${BACKUP_TS}.tar.gz"
          fi
          EOF

      # ‚úÖ GROK/HYBRID: Deploy THEME (Vite dist/ - espelhado)
      - name: üì¶ Deploy Theme (Vite compilado)
        run: |
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='node_modules/' \
            --exclude='src/' \
            --exclude='public/' \
            --exclude='plugins/' \
            --exclude='dist/' \
            --exclude='*.log' \
            --exclude='vite.config.*' \
            --exclude='package*.json' \
            --exclude='tsconfig*.json' \
            --exclude='tailwind.config.*' \
            --exclude='postcss.config.*' \
            --exclude='*.env*' \
            --exclude='.vscode/' \
            --exclude='.github/' \
            --exclude='.*' \
            --exclude='index.html' \
            -e "ssh -p ${{ secrets.SSH_PORT || '22' }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_THEME_PATH }}/

      # ‚úÖ MISTRAL/GROK: Deploy PLUGINS (SEM --delete, apenas add/update)
      - name: üîå Deploy Plugins (apenas add/update)
        run: |
          rsync -avz \
            --exclude='*.env' \
            --exclude='.git/' \
            -e "ssh -p ${{ secrets.SSH_PORT || '22' }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ./plugins/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PLUGINS_PATH }}/

      # ‚úÖ MISTRAL: Deploy PUBLIC/ (WHITELIST segura)
      - name: üìÑ Deploy Public Assets (Whitelist)
        run: |
          for file in robots.txt favicon.ico favicon.svg apple-touch-icon.png site.webmanifest browserconfig.xml manifest.json .well-known/; do
            if [ -e "public/$file" ]; then
              scp -P ${{ secrets.SSH_PORT || '22' }} -i ~/.ssh/id_rsa -r "public/$file" \
                ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PUBLIC_PATH }}/
            fi
          done
          echo "‚úÖ Public assets deployed (whitelist only)"

      # ‚úÖ MISTRAL: Permiss√µes expl√≠citas
      - name: üîß Fix File Permissions
        run: |
          ssh -p ${{ secrets.SSH_PORT || '22' }} -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash << 'EOF'
          find ${{ secrets.SSH_THEME_PATH }} -type d -exec chmod 755 {} \; 2>/dev/null || true
          find ${{ secrets.SSH_THEME_PATH }} -type f -exec chmod 644 {} \; 2>/dev/null || true
          echo "‚úÖ Permissions: dirs=755, files=644"
          EOF

      # ‚úÖ MISTRAL: Cleanup SSH
      - name: üßπ Cleanup SSH Key
        if: always()
        run: rm -f ~/.ssh/id_rsa

      # ‚úÖ MISTRAL: Summary
      - name: üìä Deploy Summary
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ DEPLOYMENT SUCCESSFUL"
            echo ""
            echo "üì¶ Deployed:"
            echo "  ‚úì Theme (Vite dist/ - espelhado)"
            echo "  ‚úì Plugins (add/update only)"
            echo "  ‚úì Public assets (whitelist)"
            echo "  ‚úì Backup criado"
            echo ""
          else
            echo "‚ùå DEPLOYMENT FAILED - Check logs"
          fi

  # ‚úÖ MISTRAL: Health check
  health-check:
    name: üè• Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'

    steps:
      - name: üåê Verify Site Online
        run: |
          SITE_URL="${{ secrets.SITE_URL }}"
          for i in 1 2 3; do
            HTTP=$(curl -s -o /dev/null -w "%{http_code}" -L --max-time 10 "$SITE_URL" || echo "000")
            if [ "$HTTP" = "200" ]; then
              echo "‚úÖ Site online (HTTP $HTTP)"
              exit 0
            fi
            echo "‚è≥ Attempt $i - Got HTTP $HTTP, retrying..."
            [ $i -lt 3 ] && sleep 5
          done
          echo "‚ö†Ô∏è  Site health check pending (may be caching)"
