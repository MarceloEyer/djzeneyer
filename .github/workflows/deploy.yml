# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üöÄ DJ ZEN EYER - PRODUCTION DEPLOY (OPTIMIZED & SECURE)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# 
# DESCRI√á√ÉO: Deploy autom√°tico para produ√ß√£o via rsync+SSH
# TRIGGER: Push na branch 'main' ou manual (workflow_dispatch)
# SEGURAN√áA: SSH hardened, prote√ß√£o WordPress, rollback autom√°tico
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

name: üöÄ Production Deploy

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
  
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip build step (use existing artifact)'
        required: false
        type: boolean
        default: false

concurrency:
  group: production-deploy
  cancel-in-progress: false

permissions:
  contents: read
  deployments: write

env:
  NODE_VERSION: '20'
  SSH_HOST: '147.79.84.222'
  SSH_PORT: '65002'
  SSH_USER: 'u790739895'
  THEME_PATH: './wp-content/themes/zentheme'
  PLUGINS_PATH: './wp-content/plugins'

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# JOB 1: BUILD
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

jobs:
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ !inputs.skip_build }}
    
    outputs:
      status: ${{ job.status }}
      hash: ${{ steps.hash.outputs.value }}
      timestamp: ${{ steps.timestamp.outputs.value }}
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üîñ Generate build metadata
        id: hash
        run: |
          echo "value=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          
      - name: ‚è∞ Generate timestamp
        id: timestamp
        run: |
          echo "value=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: üì¶ Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: üó∫Ô∏è Generate sitemaps
        run: npm run generate-sitemaps 2>&1 || true
        continue-on-error: true

      - name: üî® Build production
        run: npm run build
        env:
          NODE_ENV: production
          VITE_WP_SITE_URL: https://djzeneyer.com
          VITE_WP_REST_URL: https://djzeneyer.com/wp-json/
          VITE_WC_CONSUMER_KEY: ${{ secrets.VITE_WC_CONSUMER_KEY }}
          VITE_WC_CONSUMER_SECRET: ${{ secrets.VITE_WC_CONSUMER_SECRET }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}

      - name: ‚úÖ Validate build
        run: |
          if [ ! -d dist ]; then
            echo "‚ùå dist/ directory not found"
            exit 1
          fi
          
          if [ ! -f dist/index.html ]; then
            echo "‚ùå dist/index.html not found"
            exit 1
          fi
          
          # Verificar se h√° arquivos JS e CSS
          if [ -z "$(find dist/assets -name '*.js' 2>/dev/null)" ]; then
            echo "‚ö†Ô∏è Warning: No JS files found in dist/assets"
          fi
          
          if [ -z "$(find dist/assets -name '*.css' 2>/dev/null)" ]; then
            echo "‚ö†Ô∏è Warning: No CSS files found in dist/assets"
          fi
          
          # Mostrar tamanho do build
          echo "üìä Build size:"
          du -sh dist/
          
          echo "‚úÖ Build validation passed"

      - name: üì§ Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ steps.hash.outputs.value }}
          path: |
            dist/
            plugins/
          retention-days: 7
          compression-level: 6

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# JOB 2: DEPLOY
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build
    if: |
      always() && 
      (needs.build.result == 'success' || inputs.skip_build)
    
    environment:
      name: production
      url: https://djzeneyer.com
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üì• Download build artifact
        if: ${{ !inputs.skip_build }}
        uses: actions/download-artifact@v4
        with:
          name: build-${{ needs.build.outputs.hash }}
          path: .

      - name: üîê Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Salvar chave SSH
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Adicionar host ao known_hosts
          ssh-keyscan -p ${{ env.SSH_PORT }} -H ${{ env.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          
          # Criar config SSH (usando cat sem heredoc para interpola√ß√£o correta)
          cat > ~/.ssh/config << EOF
          Host prod
            HostName ${{ env.SSH_HOST }}
            Port ${{ env.SSH_PORT }}
            User ${{ env.SSH_USER }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking accept-new
            ConnectTimeout 10
            ServerAliveInterval 60
            ServerAliveCountMax 3
            Compression yes
            TCPKeepAlive yes
          EOF
          
          chmod 600 ~/.ssh/config

      - name: üß™ Test SSH connection
        run: |
          echo "Testing SSH connection..."
          ssh prod "echo '‚úÖ SSH connection successful' && pwd && whoami"

      - name: üìÅ Create backup and prepare directories
        run: |
          ssh prod << 'EOF'
          set -e
          
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_DIR="./backups/deploy_${TIMESTAMP}"
          
          echo "üì¶ Creating backup directory: ${BACKUP_DIR}"
          mkdir -p "${BACKUP_DIR}"
          
          # Backup do theme atual (apenas dist/)
          if [ -d "./wp-content/themes/zentheme/dist" ]; then
            echo "üì¶ Backing up current theme dist..."
            cp -r ./wp-content/themes/zentheme/dist "${BACKUP_DIR}/theme_dist"
          fi
          
          # Criar diret√≥rios necess√°rios
          echo "üìÅ Ensuring directories exist..."
          mkdir -p ./wp-content/themes/zentheme/dist
          mkdir -p ./wp-content/plugins
          
          # Limpar backups antigos (manter √∫ltimos 5)
          echo "üßπ Cleaning old backups..."
          cd ./backups
          ls -t | tail -n +6 | xargs -r rm -rf
          cd ..
          
          echo "‚úÖ Backup and directories ready"
          echo "BACKUP_DIR=${BACKUP_DIR}" > /tmp/deploy_backup_path.txt
          EOF

      - name: üöÄ Deploy React build to theme
        run: |
          echo "üì§ Deploying React build..."
          
          rsync -avz \
            --delete \
            --delete-excluded \
            --checksum \
            -e "ssh -o ConnectTimeout=10 -o ServerAliveInterval=60" \
            --stats \
            dist/ \
            prod:${{ env.THEME_PATH }}/dist/
          
          echo "‚úÖ React build deployed"

      - name: üìù Deploy theme PHP files
        run: |
          echo "üì§ Deploying theme PHP files..."
          
          rsync -avz \
            --checksum \
            -e "ssh -o ConnectTimeout=10" \
            --include='*.php' \
            --include='style.css' \
            --include='functions.php' \
            --include='index.php' \
            --include='screenshot.png' \
            --exclude='*' \
            ./ \
            prod:${{ env.THEME_PATH }}/
          
          echo "‚úÖ Theme PHP files deployed"

      - name: üîå Deploy plugins
        if: hashFiles('plugins/**') != ''
        run: |
          echo "üì§ Deploying plugins..."
          
          # Lista de plugins no reposit√≥rio
          REPO_PLUGINS=$(find plugins -mindepth 1 -maxdepth 1 -type d -exec basename {} \; 2>/dev/null || true)
          
          if [ -z "$REPO_PLUGINS" ]; then
            echo "‚ÑπÔ∏è No plugins to deploy"
            exit 0
          fi
          
          echo "Plugins to deploy:"
          echo "$REPO_PLUGINS"
          
          # Deploy cada plugin individualmente
          for plugin in $REPO_PLUGINS; do
            echo "  ‚Üí Deploying plugin: $plugin"
            
            rsync -avz \
              --checksum \
              -e "ssh -o ConnectTimeout=10" \
              "plugins/${plugin}/" \
              "prod:${{ env.PLUGINS_PATH }}/${plugin}/"
          done
          
          echo "‚úÖ Plugins deployed"

      - name: üìÑ Deploy public assets (SAFE)
        run: |
          echo "üì§ Deploying public assets to root..."
          
          # Lista de arquivos seguros para substituir
          SAFE_FILES=(
            "robots.txt"
            "favicon.ico"
            "favicon.svg"
            "apple-touch-icon.png"
            "site.webmanifest"
          )
          
          for file in "${SAFE_FILES[@]}"; do
            if [ -f "public/$file" ]; then
              echo "  ‚Üí Deploying $file"
              rsync -avz \
                -e "ssh -o ConnectTimeout=10" \
                "public/$file" \
                prod:./
            fi
          done
          
          echo "‚úÖ Public assets deployed"

      - name: üó∫Ô∏è Deploy sitemaps
        if: hashFiles('dist/sitemap*.xml') != ''
        run: |
          echo "üì§ Deploying sitemaps..."
          
          rsync -avz \
            -e "ssh -o ConnectTimeout=10" \
            --include='sitemap*.xml' \
            --exclude='*' \
            dist/ \
            prod:./
          
          echo "‚úÖ Sitemaps deployed"

      - name: ‚úÖ Verify deployment
        id: verify
        run: |
          echo "üîç Verifying deployment..."
          
          ssh prod << 'VERIFY'
          set -e
          
          echo ""
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "üìä DEPLOYMENT VERIFICATION"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo ""
          
          # Verificar tema
          echo "üé® Theme:"
          if [ -d ./wp-content/themes/zentheme ]; then
            echo "  ‚úÖ Theme directory exists"
          else
            echo "  ‚ùå Theme directory MISSING"
            exit 1
          fi
          
          if [ -d ./wp-content/themes/zentheme/dist ]; then
            echo "  ‚úÖ Dist directory exists"
            DIST_SIZE=$(du -sh ./wp-content/themes/zentheme/dist | cut -f1)
            echo "     Size: ${DIST_SIZE}"
          else
            echo "  ‚ùå Dist directory MISSING"
            exit 1
          fi
          
          if [ -f ./wp-content/themes/zentheme/index.php ]; then
            echo "  ‚úÖ index.php exists"
          else
            echo "  ‚ö†Ô∏è  index.php missing (may be OK if theme is React-only)"
          fi
          
          # Verificar plugins
          echo ""
          echo "üîå Plugins:"
          if [ -d ./wp-content/plugins ]; then
            PLUGIN_COUNT=$(find ./wp-content/plugins -mindepth 1 -maxdepth 1 -type d | wc -l)
            echo "  ‚úÖ Plugins directory exists"
            echo "     Total plugins: ${PLUGIN_COUNT}"
          else
            echo "  ‚ùå Plugins directory MISSING"
          fi
          
          # Verificar arquivos p√∫blicos
          echo ""
          echo "üìÑ Public files:"
          [ -f ./robots.txt ] && echo "  ‚úÖ robots.txt" || echo "  ‚ÑπÔ∏è  robots.txt not found"
          [ -f ./favicon.ico ] && echo "  ‚úÖ favicon.ico" || echo "  ‚ÑπÔ∏è  favicon.ico not found"
          
          SITEMAP_COUNT=$(find . -maxdepth 1 -name 'sitemap*.xml' 2>/dev/null | wc -l)
          if [ $SITEMAP_COUNT -gt 0 ]; then
            echo "  ‚úÖ Sitemaps: ${SITEMAP_COUNT} files"
          else
            echo "  ‚ÑπÔ∏è  No sitemaps found"
          fi
          
          # Verificar .htaccess (N√ÉO deve ser sobrescrito)
          echo ""
          echo "‚öôÔ∏è  WordPress files:"
          if [ -f ./.htaccess ]; then
            echo "  ‚úÖ .htaccess preserved (not touched)"
          else
            echo "  ‚ö†Ô∏è  .htaccess not found"
          fi
          
          echo ""
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "‚úÖ VERIFICATION COMPLETE"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          VERIFY

      - name: üßπ Cleanup SSH credentials
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa ~/.ssh/config
          echo "üßπ SSH credentials cleaned"

      - name: üìä Deploy summary
        if: always()
        run: |
          echo ""
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ DEPLOY SUCCESSFUL"
            echo ""
            echo "üåê Site: https://djzeneyer.com"
            echo "üì¶ Build: ${{ needs.build.outputs.hash }}"
            echo "‚è∞ Time: ${{ needs.build.outputs.timestamp }}"
          else
            echo "‚ùå DEPLOY FAILED"
            echo ""
            echo "Check logs above for details"
            echo "Backup available on server in ./backups/"
          fi
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# JOB 3: HEALTH CHECK (Post-deploy)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

  health-check:
    name: üè• Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'
    
    steps:
      - name: üîç Check site accessibility
        run: |
          echo "Checking https://djzeneyer.com..."
          
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -L https://djzeneyer.com)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Site is accessible (HTTP $HTTP_CODE)"
          else
            echo "‚ö†Ô∏è Site returned HTTP $HTTP_CODE"
            exit 1
          fi

      - name: üîç Check WordPress REST API
        run: |
          echo "Checking WordPress REST API..."
          
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://djzeneyer.com/wp-json/)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ WordPress REST API is accessible"
          else
            echo "‚ö†Ô∏è WordPress REST API returned HTTP $HTTP_CODE"
          fi

      - name: üìä Final status
        run: |
          echo ""
          echo "üéâ Deployment completed successfully!"
          echo "üåê https://djzeneyer.com is live"
