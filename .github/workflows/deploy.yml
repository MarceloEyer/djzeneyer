name: 🚀 DJ Zen Eyer - Deploy (Bolt.new + WordPress Headless)
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip npm build'
        required: false
        type: boolean
        default: false
concurrency:
  group: djzeneyer-production-deploy
  cancel-in-progress: false
permissions:
  contents: read
env:
  NODE_VERSION: '20'
jobs:
  build:
    name: 🏗️ Build Vite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_build }}
    outputs:
      hash: ${{ steps.hash.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - id: hash
        run: echo "value=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - run: npm ci --prefer-offline --no-audit
      - name: 🎨 Build Vite (React 18 + TypeScript)
        env:
          NODE_ENV: production
          VITE_WP_SITE_URL: ${{ secrets.VITE_WP_SITE_URL }}
          VITE_WP_REST_URL: ${{ secrets.VITE_WP_REST_URL }}
          VITE_WC_CONSUMER_KEY: ${{ secrets.VITE_WC_CONSUMER_KEY }}
          VITE_WC_CONSUMER_SECRET: ${{ secrets.VITE_WC_CONSUMER_SECRET }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
        run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: djz-dist-${{ steps.hash.outputs.value }}
          path: dist/
          retention-days: 1

  deploy:
    name: 🚀 Deploy para Hostinger
    runs-on: ubuntu-latest
    needs: build
    if: always() && (needs.build.result == 'success' || inputs.skip_build)
    steps:
      - uses: actions/checkout@v4
      - if: ${{ !inputs.skip_build }}
        uses: actions/download-artifact@v4
        with:
          name: djz-dist-${{ needs.build.outputs.hash }}
          path: dist/

      # ✅ SSH SETUP
      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          chmod 644 ~/.ssh/known_hosts

      # ✅ TEST SSH
      - name: 🧪 Test SSH Connection
        run: |
          ssh -p ${{ secrets.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "whoami && echo '✅ SSH Connection OK!'"

      # ✅ BACKUP DO TEMA
      - name: 💾 Backup Theme
        run: |
          ssh -p ${{ secrets.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash << 'EOF'
          BACKUP_TS=$(date +%Y%m%d_%H%M%S)
          THEME_PATH="${{ secrets.SSH_THEME_PATH }}"
          BACKUP_PATH="${{ secrets.SSH_BACKUP_PATH }}"
          if [ -d "$THEME_PATH" ]; then
            mkdir -p "$BACKUP_PATH"
            tar -czf "$BACKUP_PATH/zentheme_${BACKUP_TS}.tar.gz" -C "$THEME_PATH" . 2>/dev/null || true
            ls -t "$BACKUP_PATH"/zentheme_*.tar.gz 2>/dev/null | tail -n +11 | xargs -r rm
            echo "✅ Backup: zentheme_${BACKUP_TS}.tar.gz"
          else
            echo "⚠️ Tema não existe ainda (primeiro deploy)"
          fi
          EOF

      # ✅ PREPARA ARQUIVOS DO TEMA
      - name: 📦 Prepara Arquivos do Tema
        run: |
          mkdir -p clean_theme
          # Copia dist/ (Vite)
          cp -r dist/* clean_theme/
          # Copia inc/ (PHP)
          cp -r inc/ clean_theme/
          # Copia functions.php, style.css, index.php, etc.
          for file in functions.php style.css index.php screenshot.png; do
            if [ -f "$file" ]; then
              cp "$file" clean_theme/
              echo "✅ $file copiado"
            fi
          done

      # ✅ DEPLOY DO TEMA
      - name: 🚀 Deploy Theme (zentheme/)
        run: |
          rsync -avz --delete \
            -e "ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            clean_theme/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_THEME_PATH }}/

      # ✅ DEPLOY DE PLUGINS
      - name: 🔌 Deploy Custom Plugins
        if: hashFiles('plugins/**') != ''
        run: |
          rsync -avz \
            -e "ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ./plugins/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PLUGINS_PATH }}/

      # ✅ DEPLOY DE ASSETS PÚBLICOS
      - name: 📄 Deploy Public Assets
        run: |
          for file in robots.txt ai-bots.txt favicon.ico favicon.svg apple-touch-icon.png site.webmanifest browserconfig.xml; do
            if [ -f "public/$file" ]; then
              scp -P ${{ secrets.SSH_PORT }} \
                -i ~/.ssh/id_rsa \
                -o StrictHostKeyChecking=no \
                "public/$file" \
                ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PUBLIC_PATH }}/
              echo "✅ $file deployed"
            fi
          done

      # ✅ FIX PERMISSIONS
      - name: 🔧 Fix File Permissions
        run: |
          ssh -p ${{ secrets.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash << 'EOF'
          THEME_PATH="${{ secrets.SSH_THEME_PATH }}"
          find "$THEME_PATH" -type d -exec chmod 755 {} \;
          find "$THEME_PATH" -type f -exec chmod 644 {} \;
          echo "✅ Permissions fixed (dirs=755, files=644)"
          EOF

      # ✅ VERIFICA DEPLOY
      - name: ✅ Verify Deployment
        run: |
          ssh -p ${{ secrets.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash << 'EOF'
          THEME_PATH="${{ secrets.SSH_THEME_PATH }}"
          echo "📍 Deployment Verification:"
          echo "================================"
          echo "Theme Path: $THEME_PATH"
          echo "Size: $(du -sh "$THEME_PATH" 2>/dev/null | cut -f1)"
          echo "Files: $(find "$THEME_PATH" -type f | wc -l)"
          echo ""
          echo "✅ Key Files:"
          [ -f "$THEME_PATH/functions.php" ] && echo "  ✅ functions.php" || echo "  ❌ functions.php MISSING"
          [ -f "$THEME_PATH/style.css" ] && echo "  ✅ style.css" || echo "  ❌ style.css MISSING"
          [ -d "$THEME_PATH/inc" ] && echo "  ✅ inc/" || echo "  ❌ inc/ MISSING"
          [ -f "$THEME_PATH/.vite/manifest.json" ] && echo "  ✅ .vite/manifest.json" || echo "  ⚠️  .vite/manifest.json"
          EOF

      # ✅ CLEANUP
      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -rf clean_theme
          echo "✅ Cleanup complete"

      # ✅ SUMMARY
      - name: 📊 Deployment Summary
        if: always()
        run: |
          echo "╔════════════════════════════════════════╗"
          if [ "${{ job.status }}" = "success" ]; then
            echo "║  ✅ DEPLOYMENT SUCCESSFUL              ║"
          else
            echo "║  ❌ DEPLOYMENT FAILED                  ║"
          fi
          echo "╚════════════════════════════════════════╝"
          echo "📋 DJ Zen Eyer v12.2.0"
          echo "🎵 Components Deployed:"
          echo "  ✓ Theme (Vite React 18 compiled)"
          echo "  ✓ inc/ (djz-config, djz-helpers)"
          echo "  ✓ functions.php (REST API + Security)"
          echo "  ✓ Custom Plugins (add/update only)"
          echo "  ✓ Public assets (robots.txt, ai-bots.txt)"

  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'
    steps:
      - name: 🌐 Verify Site Online
        run: |
          SITE_URL="${{ secrets.SITE_URL }}"
          for i in 1 2 3; do
            HTTP=$(curl -s -o /dev/null -w "%{http_code}" -L --max-time 10 "$SITE_URL" || echo "000")
            if [ "$HTTP" = "200" ]; then
              echo "✅ Site online (HTTP $HTTP)"
              exit 0
            fi
            echo "⏳ Attempt $i/3 - HTTP $HTTP (retrying in 5s)"
            [ $i -lt 3 ] && sleep 5
          done
          echo "⚠️ Site health check pending (cache warming up)"
      - name: ✅ Verify REST API
        run: |
          SITE_URL="${{ secrets.SITE_URL }}"
          HTTP=$(curl -s -o /dev/null -w "%{http_code}" -L "$SITE_URL/wp-json/djz/v1/config" || echo "000")
          if [ "$HTTP" = "200" ]; then
            echo "✅ REST API online (HTTP $HTTP)"
          else
            echo "⚠️ REST API: HTTP $HTTP (may need cache flush)"
          fi
      - name: 🤖 Verify AI Bot Configuration
        run: |
          SITE_URL="${{ secrets.SITE_URL }}"
          ROBOTS=$(curl -s "$SITE_URL/robots.txt" | head -5)
          if echo "$ROBOTS" | grep -q "User-agent"; then
            echo "✅ robots.txt OK"
          fi
          AI_BOTS=$(curl -s "$SITE_URL/ai-bots.txt" | head -3)
          if [ -n "$AI_BOTS" ]; then
            echo "✅ ai-bots.txt OK"
          fi
