name: üöÄ Deploy Bolt.new + WordPress Headless

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: production-deploy
  cancel-in-progress: false

permissions:
  contents: read

env:
  NODE_VERSION: '20'

jobs:
  build:
    name: üèóÔ∏è Build Vite
    runs-on: ubuntu-latest
    
    outputs:
      hash: ${{ steps.hash.outputs.value }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - id: hash
        run: echo "value=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - run: npm ci --prefer-offline --no-audit

      - name: Build Vite
        env:
          NODE_ENV: production
          VITE_WP_SITE_URL: ${{ secrets.VITE_WP_SITE_URL }}
          VITE_WP_REST_URL: ${{ secrets.VITE_WP_REST_URL }}
          VITE_WC_CONSUMER_KEY: ${{ secrets.VITE_WC_CONSUMER_KEY }}
          VITE_WC_CONSUMER_SECRET: ${{ secrets.VITE_WC_CONSUMER_SECRET }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
        run: npm run build

      - uses: actions/upload-artifact@v4
        with:
          name: dist-${{ steps.hash.outputs.value }}
          path: dist/
          retention-days: 1

  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.build.outputs.hash }}
          path: dist/

      # ‚úÖ SSH SETUP - VERS√ÉO CORRIGIDA
      - name: üîê Setup SSH (Corrigido)
        run: |
          # Step 1: Criar diret√≥rio
          mkdir -p ~/.ssh || { echo "‚ùå Failed to create ~/.ssh"; exit 1; }
          echo "‚úÖ SSH directory created"
          
          # Step 2: Escrever chave privada
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          if [ ! -f ~/.ssh/id_rsa ]; then
            echo "‚ùå SSH key file not created"
            exit 1
          fi
          echo "‚úÖ SSH key file created"
          
          # Step 3: Corrigir permiss√µes
          chmod 600 ~/.ssh/id_rsa
          echo "‚úÖ SSH key permissions set (600)"
          
          # Step 4: Adicionar server ao known_hosts
          ssh-keyscan -p ${{ secrets.SSH_PORT || '22' }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          chmod 644 ~/.ssh/known_hosts
          echo "‚úÖ SSH known_hosts configured"
          
          # Step 5: Verifica√ß√£o final
          ls -la ~/.ssh/
          echo "‚úÖ SSH setup complete"

      # ‚úÖ TEST SSH
      - name: üß™ Test SSH Connection
        run: |
          ssh -v -p ${{ secrets.SSH_PORT || '22' }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=~/.ssh/known_hosts \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo '‚úÖ SSH Connection OK'"

      # ‚úÖ BACKUP
      - name: üíæ Backup Theme
        run: |
          ssh -p ${{ secrets.SSH_PORT || '22' }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash << 'EOF'
          BACKUP_TS=$(date +%Y%m%d_%H%M%S)
          mkdir -p ${{ secrets.SSH_BACKUP_PATH }}
          tar -czf ${{ secrets.SSH_BACKUP_PATH }}/theme_${BACKUP_TS}.tar.gz \
            -C ${{ secrets.SSH_THEME_PATH }} . 2>/dev/null || true
          ls -t ${{ secrets.SSH_BACKUP_PATH }}/theme_*.tar.gz 2>/dev/null | tail -n +11 | xargs -r rm
          echo "‚úÖ Backup: theme_${BACKUP_TS}.tar.gz"
          EOF

      # ‚úÖ DEPLOY THEME
      - name: üì¶ Deploy Theme
        run: |
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='node_modules/' \
            --exclude='src/' \
            --exclude='public/' \
            --exclude='plugins/' \
            --exclude='dist/' \
            --exclude='*.log' \
            --exclude='vite.config.*' \
            --exclude='package*.json' \
            --exclude='tsconfig*.json' \
            --exclude='*.env*' \
            --exclude='.github/' \
            --exclude='.*' \
            --exclude='index.html' \
            -e "ssh -p ${{ secrets.SSH_PORT || '22' }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_THEME_PATH }}/

      # ‚úÖ DEPLOY PLUGINS
      - name: üîå Deploy Plugins
        run: |
          rsync -avz \
            --exclude='*.env' \
            --exclude='.git/' \
            -e "ssh -p ${{ secrets.SSH_PORT || '22' }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ./plugins/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PLUGINS_PATH }}/

      # ‚úÖ DEPLOY PUBLIC
      - name: üìÑ Deploy Public Assets
        run: |
          for file in robots.txt favicon.ico favicon.svg apple-touch-icon.png site.webmanifest; do
            if [ -f "public/$file" ]; then
              scp -P ${{ secrets.SSH_PORT || '22' }} \
                -i ~/.ssh/id_rsa \
                -o StrictHostKeyChecking=no \
                "public/$file" \
                ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PUBLIC_PATH }}/
            fi
          done
          echo "‚úÖ Public assets deployed"

      # ‚úÖ FIX PERMISSIONS
      - name: üîß Fix Permissions
        run: |
          ssh -p ${{ secrets.SSH_PORT || '22' }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash << 'EOF'
          find ${{ secrets.SSH_THEME_PATH }} -type d -exec chmod 755 {} \; 2>/dev/null || true
          find ${{ secrets.SSH_THEME_PATH }} -type f -exec chmod 644 {} \; 2>/dev/null || true
          echo "‚úÖ Permissions fixed"
          EOF

      # ‚úÖ CLEANUP
      - name: üßπ Cleanup SSH
        if: always()
        run: rm -f ~/.ssh/id_rsa

      # ‚úÖ SUMMARY
      - name: üìä Deploy Summary
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ DEPLOYMENT SUCCESSFUL"
          else
            echo "‚ùå DEPLOYMENT FAILED"
          fi

  health-check:
    name: üè• Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'

    steps:
      - name: üåê Verify Site
        run: |
          for i in 1 2 3; do
            HTTP=$(curl -s -o /dev/null -w "%{http_code}" -L "${{ secrets.SITE_URL }}" || echo "000")
            if [ "$HTTP" = "200" ]; then
              echo "‚úÖ Site online (HTTP $HTTP)"
              exit 0
            fi
            echo "‚è≥ Attempt $i - Retrying..."
            sleep 5
          done
          echo "‚ö†Ô∏è  Site check pending"
