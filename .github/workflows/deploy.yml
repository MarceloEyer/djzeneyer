name: 🚀 Production Deploy

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
  
  workflow_dispatch:

concurrency:
  group: production-deploy
  cancel-in-progress: false

permissions:
  contents: read
  deployments: write

env:
  NODE_VERSION: '20'
  SSH_HOST: '147.79.84.222'
  SSH_PORT: '65002'
  SSH_USER: 'u790739895'

jobs:
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    outputs:
      status: ${{ job.status }}
      hash: ${{ steps.hash.outputs.value }}
      timestamp: ${{ steps.timestamp.outputs.value }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔖 Generate metadata
        id: hash
        run: echo "value=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - name: ⏰ Generate timestamp
        id: timestamp
        run: echo "value=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🗺️ Generate sitemaps
        run: npm run generate-sitemaps 2>&1 || true
        continue-on-error: true

      - name: 🔨 Build production
        run: npm run build
        env:
          NODE_ENV: production
          VITE_WP_SITE_URL: https://djzeneyer.com
          VITE_WP_REST_URL: https://djzeneyer.com/wp-json/
          VITE_WC_CONSUMER_KEY: ${{ secrets.VITE_WC_CONSUMER_KEY }}
          VITE_WC_CONSUMER_SECRET: ${{ secrets.VITE_WC_CONSUMER_SECRET }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}

      - name: ✅ Validate build
        run: |
          [ -d dist ] && [ -f dist/index.html ] || exit 1
          [ -s dist/index.html ] || exit 1
          du -sh dist/ && echo "✅ Build valid"

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ steps.hash.outputs.value }}
          path: dist/
          retention-days: 7

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build
    if: needs.build.result == 'success'
    
    environment:
      name: production
      url: https://djzeneyer.com
    
    steps:
      - name: 📥 Checkout (get full theme)
        uses: actions/checkout@v4

      - name: 📥 Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ needs.build.outputs.hash }}
          path: dist/

      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ env.SSH_PORT }} -H ${{ env.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          
          # CORRETO: Aspas duplas para interpolação
          cat > ~/.ssh/config << "SSHEOF"
Host prod
  HostName ${{ env.SSH_HOST }}
  Port ${{ env.SSH_PORT }}
  User ${{ env.SSH_USER }}
  IdentityFile ~/.ssh/id_rsa
  StrictHostKeyChecking accept-new
  ConnectTimeout 10
  ServerAliveInterval 60
  ServerAliveCountMax 3
SSHEOF
          chmod 600 ~/.ssh/config

      - name: 🧪 Test SSH
        run: ssh prod "pwd && whoami"

      - name: 📦 Backup current theme
        run: |
          ssh prod << 'EOF'
          set -e
          if [ -d ./wp-content/themes/zentheme ]; then
            BACKUP_TS=$(date +%Y%m%d_%H%M%S)
            mkdir -p ./backups
            echo "📦 Backing up current theme..."
            tar -czf "./backups/theme_${BACKUP_TS}.tar.gz" ./wp-content/themes/zentheme/
            echo "✅ Backup: backups/theme_${BACKUP_TS}.tar.gz"
            
            # Manter apenas últimos 5 backups
            cd ./backups
            ls -t theme_*.tar.gz | tail -n +6 | xargs -r rm
            cd ..
          fi
          EOF

      - name: 🚀 Deploy complete theme (full sync with delete)
        run: |
          echo "📤 Deploying complete theme (repository → production)..."
          
          rsync -avz --delete --checksum \
            -e "ssh -o ConnectTimeout=10" \
            --exclude='.git*' \
            --exclude='node_modules' \
            --exclude='src' \
            --exclude='.github' \
            --exclude='scripts' \
            --exclude='package*.json' \
            --exclude='tsconfig*.json' \
            --exclude='vite.config.*' \
            --exclude='dist' \
            --exclude='public' \
            --exclude='*.md' \
            --exclude='.env*' \
            --exclude='.DS_Store' \
            --exclude='*.log' \
            --exclude='.editorconfig' \
            --exclude='.prettierrc' \
            ./ \
            prod:./wp-content/themes/zentheme/
          
          echo "✅ Theme deployed (all files synced from repository)"

      - name: 🚀 Deploy React build to dist folder
        run: |
          echo "📤 Deploying React build..."
          
          rsync -avz --delete --checksum \
            -e "ssh -o ConnectTimeout=10" \
            dist/ \
            prod:./wp-content/themes/zentheme/dist/
          
          echo "✅ React build deployed to dist/"

      - name: 🔌 Deploy plugins (only if changed)
        if: hashFiles('plugins/**') != ''
        run: |
          REPO_PLUGINS=$(find plugins -mindepth 1 -maxdepth 1 -type d -exec basename {} \; 2>/dev/null)
          
          if [ -z "$REPO_PLUGINS" ]; then
            echo "ℹ️ No plugins in repository"
            exit 0
          fi
          
          echo "📤 Deploying plugins..."
          for plugin in $REPO_PLUGINS; do
            rsync -avz \
              -e "ssh -o ConnectTimeout=10" \
              "plugins/${plugin}/" \
              "prod:./wp-content/plugins/${plugin}/"
          done
          echo "✅ Plugins deployed"

      - name: 📄 Deploy sitemaps (if generated)
        if: hashFiles('dist/sitemap*.xml') != ''
        run: |
          rsync -avz \
            -e "ssh -o ConnectTimeout=10" \
            --include='sitemap*.xml' \
            --exclude='*' \
            dist/ \
            prod:./
          
          echo "✅ Sitemaps deployed"

      - name: 🛡️ Protect WordPress files (never overwrite)
        run: |
          ssh prod << 'EOF'
          # Restaurar backups se existirem (segurança extra)
          [ -f ./.htaccess.backup ] && cp ./.htaccess.backup ./.htaccess
          [ -f ./wp-config.php.backup ] && cp ./wp-config.php.backup ./wp-config.php
          
          echo "✅ WordPress protection verified"
          EOF

      - name: ✅ Verify deployment
        run: |
          ssh prod << 'VERIFY'
          set -e
          
          echo ""
          echo "════════════════════════════════════════"
          echo "📊 DEPLOYMENT VERIFICATION"
          echo "════════════════════════════════════════"
          
          # Theme structure
          echo "🎨 Theme:"
          [ -d ./wp-content/themes/zentheme ] && echo "  ✅ Theme directory" || { echo "  ❌ MISSING"; exit 1; }
          [ -f ./wp-content/themes/zentheme/functions.php ] && echo "  ✅ functions.php" || { echo "  ❌ MISSING"; exit 1; }
          [ -f ./wp-content/themes/zentheme/index.php ] && echo "  ✅ index.php" || { echo "  ❌ MISSING"; exit 1; }
          [ -d ./wp-content/themes/zentheme/dist ] && echo "  ✅ dist/" || { echo "  ❌ MISSING"; exit 1; }
          
          # Dist contents
          echo ""
          echo "📦 React build:"
          [ -f ./wp-content/themes/zentheme/dist/index.html ] && echo "  ✅ index.html" || echo "  ⚠️  missing"
          JS_COUNT=$(find ./wp-content/themes/zentheme/dist/assets -name "*.js" 2>/dev/null | wc -l)
          echo "  JS files: $JS_COUNT"
          CSS_COUNT=$(find ./wp-content/themes/zentheme/dist/assets -name "*.css" 2>/dev/null | wc -l)
          echo "  CSS files: $CSS_COUNT"
          
          THEME_SIZE=$(du -sh ./wp-content/themes/zentheme | cut -f1)
          echo ""
          echo "📊 Theme size: $THEME_SIZE"
          
          echo ""
          echo "════════════════════════════════════════"
          echo "✅ VERIFICATION COMPLETE"
          echo "════════════════════════════════════════"
          VERIFY

      - name: 🧹 Cleanup SSH
        if: always()
        run: rm -f ~/.ssh/id_rsa ~/.ssh/config

      - name: 📊 Deployment summary
        if: always()
        run: |
          echo ""
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ DEPLOY SUCCESSFUL"
            echo "🌐 https://djzeneyer.com"
            echo "📦 Build: ${{ needs.build.outputs.hash }}"
            echo "⏰ Time: ${{ needs.build.outputs.timestamp }}"
          else
            echo "❌ DEPLOY FAILED - Check logs"
          fi
          echo ""

  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'
    
    steps:
      - name: 🔍 Check site
        run: |
          curl -f https://djzeneyer.com > /dev/null && echo "✅ Site live" || exit 1

      - name: 🎉 Deployment complete
        run: echo "✅ All checks passed!"
