name: üöÄ DJ Zen Eyer - Deploy (Bolt.new + WordPress Headless)

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip npm build'
        required: false
        type: boolean
        default: false

concurrency:
  group: djzeneyer-production-deploy
  cancel-in-progress: false

permissions:
  contents: read

env:
  NODE_VERSION: '20'

jobs:
  build:
    name: üèóÔ∏è Build Vite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_build }}
    
    outputs:
      hash: ${{ steps.hash.outputs.value }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - id: hash
        run: echo "value=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - run: npm ci --prefer-offline --no-audit

      - name: üé® Build Vite (React 18 + TypeScript)
        env:
          NODE_ENV: production
          VITE_WP_SITE_URL: ${{ secrets.VITE_WP_SITE_URL }}
          VITE_WP_REST_URL: ${{ secrets.VITE_WP_REST_URL }}
          VITE_WC_CONSUMER_KEY: ${{ secrets.VITE_WC_CONSUMER_KEY }}
          VITE_WC_CONSUMER_SECRET: ${{ secrets.VITE_WC_CONSUMER_SECRET }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
        run: npm run build

      - uses: actions/upload-artifact@v4
        with:
          name: djz-dist-${{ steps.hash.outputs.value }}
          path: dist/
          retention-days: 1

  deploy:
    name: üöÄ Deploy para Hostinger
    runs-on: ubuntu-latest
    needs: build
    if: always() && (needs.build.result == 'success' || inputs.skip_build)

    steps:
      - uses: actions/checkout@v4

      - if: ${{ !inputs.skip_build }}
        uses: actions/download-artifact@v4
        with:
          name: djz-dist-${{ needs.build.outputs.hash }}
          path: dist/

      # ‚úÖ SSH SETUP - USANDO TODOS OS SECRETS QUE VOC√ä CRIOU
      - name: üîê Setup SSH
        run: |
          echo "üîß SSH Setup iniciado..."
          
          # Step 1: Criar diret√≥rio
          mkdir -p ~/.ssh && echo "‚úÖ SSH directory criado"
          
          # Step 2: Escrever chave privada
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          if [ ! -f ~/.ssh/id_rsa ]; then
            echo "‚ùå Falha ao criar SSH key"
            exit 1
          fi
          echo "‚úÖ SSH key criada"
          
          # Step 3: Permiss√µes
          chmod 600 ~/.ssh/id_rsa
          echo "‚úÖ Permiss√µes: 600"
          
          # Step 4: Known hosts (usa SSH_PORT do secret)
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
          chmod 644 ~/.ssh/known_hosts
          echo "‚úÖ Known hosts configurado (porta: ${{ secrets.SSH_PORT }})"
          
          echo "‚úÖ SSH setup complete"

      # ‚úÖ TEST SSH (usando todos os secrets)
      - name: üß™ Test SSH Connection
        run: |
          echo "üîç Testando SSH..."
          ssh -v -p ${{ secrets.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=~/.ssh/known_hosts \
            -o ConnectTimeout=15 \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "whoami && echo '‚úÖ SSH Connection OK!'" || {
            echo "‚ùå SSH connection failed"
            exit 1
          }

      # ‚úÖ BACKUP (usando SSH_BACKUP_PATH do secret)
      - name: üíæ Backup Theme
        run: |
          ssh -p ${{ secrets.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash << 'EOF'
          
          BACKUP_TS=$(date +%Y%m%d_%H%M%S)
          THEME_PATH="${{ secrets.SSH_THEME_PATH }}"
          BACKUP_PATH="${{ secrets.SSH_BACKUP_PATH }}"
          
          if [ -d "$THEME_PATH" ]; then
            mkdir -p "$BACKUP_PATH"
            tar -czf "$BACKUP_PATH/zentheme_${BACKUP_TS}.tar.gz" \
              -C "$THEME_PATH" . 2>/dev/null || true
            ls -t "$BACKUP_PATH"/zentheme_*.tar.gz 2>/dev/null | tail -n +11 | xargs -r rm
            echo "‚úÖ Backup: zentheme_${BACKUP_TS}.tar.gz"
          else
            echo "‚ö†Ô∏è  Tema n√£o existe ainda (primeiro deploy)"
          fi
          EOF

      # ‚úÖ DEPLOY THEME (usando SSH_THEME_PATH do secret)
      - name: üì¶ Deploy Theme (Vite + inc/ + functions.php)
        run: |
          echo "üé® Preparando theme files..."
          
          mkdir -p clean_theme
          
          # Copiar dist/ (Vite compiled)
          if [ -d "dist/" ]; then
            cp -r dist/* clean_theme/
            echo "‚úÖ dist/ copied"
          fi
          
          # Copiar inc/ (djz-config, djz-helpers)
          if [ -d "inc/" ]; then
            mkdir -p clean_theme/inc
            cp -r inc/* clean_theme/inc/
            echo "‚úÖ inc/ copied"
          fi
          
          # Copiar functions.php
          if [ -f "functions.php" ]; then
            cp functions.php clean_theme/
            echo "‚úÖ functions.php copied"
          fi
          
          # Copiar outros arquivos tema
          for file in style.css index.php screenshot.png; do
            if [ -f "$file" ]; then
              cp "$file" clean_theme/
              echo "‚úÖ $file copied"
            fi
          done
          
          echo ""
          echo "üöÄ Enviando para servidor..."
          
          # Deploy com rsync --delete
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='node_modules/' \
            --exclude='src/' \
            --exclude='public/' \
            --exclude='plugins/' \
            --exclude='vite.config.*' \
            --exclude='tsconfig*.json' \
            --exclude='package*.json' \
            --exclude='*.env*' \
            --exclude='.github/' \
            --exclude='.*' \
            --exclude='index.html' \
            -e "ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            clean_theme/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_THEME_PATH }}/
          
          echo "‚úÖ Theme deployed successfully"

      # ‚úÖ DEPLOY PLUGINS (usando SSH_PLUGINS_PATH do secret)
      - name: üîå Deploy Custom Plugins (add/update only)
        if: hashFiles('plugins/**') != ''
        run: |
          echo "üîå Deploying custom plugins..."
          
          rsync -avz \
            --exclude='*.env' \
            --exclude='.git/' \
            --exclude='node_modules/' \
            -e "ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ./plugins/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PLUGINS_PATH }}/
          
          echo "‚úÖ Plugins deployed (add/update only, no deletions)"

      # ‚úÖ DEPLOY PUBLIC (usando SSH_PUBLIC_PATH do secret)
      - name: üìÑ Deploy Public Assets (AI Bot Friendly!)
        run: |
          echo "üìÑ Deploying public assets..."
          
          for file in robots.txt ai-bots.txt favicon.ico favicon.svg \
                      apple-touch-icon.png site.webmanifest browserconfig.xml \
                      manifest.json; do
            
            if [ -f "public/$file" ]; then
              scp -P ${{ secrets.SSH_PORT }} \
                -i ~/.ssh/id_rsa \
                -o StrictHostKeyChecking=no \
                "public/$file" \
                ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PUBLIC_PATH }}/
              echo "‚úÖ $file deployed"
            fi
          done
          
          echo "‚úÖ Public assets deployed"

      # ‚úÖ FIX PERMISSIONS
      - name: üîß Fix File Permissions
        run: |
          ssh -p ${{ secrets.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash << 'EOF'
          
          THEME_PATH="${{ secrets.SSH_THEME_PATH }}"
          
          echo "üîß Fixing permissions..."
          find "$THEME_PATH" -type d -exec chmod 755 {} \; 2>/dev/null || true
          find "$THEME_PATH" -type f -exec chmod 644 {} \; 2>/dev/null || true
          
          echo "‚úÖ Permissions fixed (dirs=755, files=644)"
          EOF

      # ‚úÖ VERIFY DEPLOYMENT
      - name: ‚úÖ Verify Deployment
        run: |
          ssh -p ${{ secrets.SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash << 'EOF'
          
          THEME_PATH="${{ secrets.SSH_THEME_PATH }}"
          
          echo ""
          echo "üìç Deployment Verification:"
          echo "================================"
          echo "Theme Path: $THEME_PATH"
          echo "Size: $(du -sh "$THEME_PATH" 2>/dev/null | cut -f1)"
          echo "Files: $(find "$THEME_PATH" -type f | wc -l)"
          echo ""
          echo "‚úÖ Key Files:"
          [ -f "$THEME_PATH/functions.php" ] && echo "  ‚úÖ functions.php" || echo "  ‚ùå functions.php MISSING"
          [ -f "$THEME_PATH/style.css" ] && echo "  ‚úÖ style.css" || echo "  ‚ùå style.css MISSING"
          [ -d "$THEME_PATH/inc" ] && echo "  ‚úÖ inc/" || echo "  ‚ùå inc/ MISSING"
          [ -f "$THEME_PATH/.vite/manifest.json" ] && echo "  ‚úÖ .vite/manifest.json" || echo "  ‚ö†Ô∏è  .vite/manifest.json"
          echo ""
          EOF

      # ‚úÖ CLEANUP SSH
      - name: üßπ Cleanup SSH Key
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -rf clean_theme
          echo "‚úÖ Cleanup complete"

      # ‚úÖ DEPLOYMENT SUMMARY
      - name: üìä Deployment Summary
        if: always()
        run: |
          echo ""
          echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚ïë  ‚úÖ DEPLOYMENT SUCCESSFUL              ‚ïë"
          else
            echo "‚ïë  ‚ùå DEPLOYMENT FAILED                  ‚ïë"
          fi
          echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
          echo ""
          echo "üìã DJ Zen Eyer v12.2.0"
          echo "üéµ Components Deployed:"
          echo "  ‚úì Theme (Vite React 18 compiled)"
          echo "  ‚úì inc/ (djz-config, djz-helpers)"
          echo "  ‚úì functions.php (REST API + Security)"
          echo "  ‚úì Custom Plugins (add/update only)"
          echo "  ‚úì Public assets (robots.txt, ai-bots.txt)"
          echo "  ‚úì Backup created"
          echo ""
          echo "üåê Site: ${{ secrets.SITE_URL }}"
          echo "üîå SSH Port: ${{ secrets.SSH_PORT }}"
          echo "üë§ User: ${{ secrets.SSH_USER }}"
          echo ""

  # ‚úÖ HEALTH CHECK
  health-check:
    name: üè• Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'

    steps:
      - name: üåê Verify Site Online
        run: |
          SITE_URL="${{ secrets.SITE_URL }}"
          
          echo "üîç Health checking: $SITE_URL"
          
          for i in 1 2 3; do
            HTTP=$(curl -s -o /dev/null -w "%{http_code}" -L --max-time 10 "$SITE_URL" || echo "000")
            
            if [ "$HTTP" = "200" ]; then
              echo "‚úÖ Site online (HTTP $HTTP)"
              exit 0
            fi
            
            echo "‚è≥ Attempt $i/3 - HTTP $HTTP (retrying in 5s)"
            [ $i -lt 3 ] && sleep 5
          done
          
          echo "‚ö†Ô∏è  Site health check pending (cache warming up)"

      - name: ‚úÖ Verify REST API
        run: |
          SITE_URL="${{ secrets.SITE_URL }}"
          
          echo "üîç Checking REST API: $SITE_URL/wp-json/djz/v1/config"
          
          HTTP=$(curl -s -o /dev/null -w "%{http_code}" -L "$SITE_URL/wp-json/djz/v1/config" || echo "000")
          
          if [ "$HTTP" = "200" ]; then
            echo "‚úÖ REST API online (HTTP $HTTP)"
          else
            echo "‚ö†Ô∏è  REST API: HTTP $HTTP (may need cache flush)"
          fi

      - name: ü§ñ Verify AI Bot Configuration
        run: |
          SITE_URL="${{ secrets.SITE_URL }}"
          
          echo "ü§ñ Checking AI bot configuration..."
          
          ROBOTS=$(curl -s "$SITE_URL/robots.txt" | head -5)
          if echo "$ROBOTS" | grep -q "User-agent"; then
            echo "‚úÖ robots.txt OK"
          fi
          
          AI_BOTS=$(curl -s "$SITE_URL/ai-bots.txt" | head -3)
          if [ -n "$AI_BOTS" ]; then
            echo "‚úÖ ai-bots.txt OK"
          fi
