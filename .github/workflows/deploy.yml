name: 🚀 Production Deploy - DJ ZEN EYER v2.0

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip build step (use existing artifact)'
        required: false
        type: boolean
        default: false

concurrency:
  group: production-deploy
  cancel-in-progress: false

permissions:
  contents: read
  deployments: write

env:
  NODE_VERSION: '20'
  SSH_HOST: '147.79.84.222'
  SSH_PORT: '65002'
  SSH_USER: 'u790739895'
  # ✅ Caminhos ABSOLUTOS - Hostinger
  THEME_PATH: '/home/u790739895/public_html/wp-content/themes/zentheme'
  PLUGINS_PATH: '/home/u790739895/public_html/wp-content/plugins'
  WEB_ROOT: '/home/u790739895/public_html'
  BACKUP_PATH: '/home/u790739895/backups/theme'

jobs:
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ !inputs.skip_build }}
    outputs:
      status: ${{ job.status }}
      hash: ${{ steps.hash.outputs.value }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔖 Get commit hash
        id: hash
        run: echo "value=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🛠️ Build project
        run: npm run build
        env:
          NODE_ENV: production
          VITE_WP_SITE_URL: https://djzeneyer.com
          VITE_WP_REST_URL: https://djzeneyer.com/wp-json/
          VITE_WC_CONSUMER_KEY: ${{ secrets.VITE_WC_CONSUMER_KEY }}
          VITE_WC_CONSUMER_SECRET: ${{ secrets.VITE_WC_CONSUMER_SECRET }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}

      - name: 📂 Verify build output
        run: |
          [ -d dist ] && [ -f dist/index.html ] && [ -s dist/index.html ] || exit 1

      - name: 📤 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ steps.hash.outputs.value }}
          path: dist/
          retention-days: 7

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build
    if: needs.build.result == 'success' || inputs.skip_build
    environment:
      name: production
      url: https://djzeneyer.com

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      # ============================================
      # DOWNLOAD & VERIFY ARTIFACT
      # ============================================

      - name: 📥 Download build artifact
        if: ${{ !inputs.skip_build }}
        uses: actions/download-artifact@v4
        with:
          name: build-${{ needs.build.outputs.hash }}
          path: dist/

      - name: ✅ Verify artifact integrity
        if: ${{ !inputs.skip_build }}
        run: |
          echo "═══════════════════════════════════════════"
          echo "📦 BUILD ARTIFACT VERIFICATION"
          echo "═══════════════════════════════════════════"
          
          if [ ! -d dist ] || [ ! -f dist/index.html ]; then
            echo "❌ FAILED: Build artifact is invalid!"
            exit 1
          fi
          
          SIZE=$(du -sh dist | cut -f1)
          FILES=$(find dist -type f | wc -l)
          
          echo "✅ Artifact valid"
          echo "   Size: $SIZE"
          echo "   Files: $FILES"
          echo "═══════════════════════════════════════════"

      # ============================================
      # SSH SETUP & VALIDATION
      # ============================================

      - name: 🔑 Setup SSH connection
        run: |
          echo "═══════════════════════════════════════════"
          echo "🔑 SSH CONFIGURATION"
          echo "═══════════════════════════════════════════"
          
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ env.SSH_PORT }} -H ${{ env.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          
          echo "✅ SSH configured"
          echo "   Host: ${{ env.SSH_HOST }}"
          echo "   Port: ${{ env.SSH_PORT }}"
          echo "   User: ${{ env.SSH_USER }}"
          echo "═══════════════════════════════════════════"

      - name: 🧪 Test SSH connection
        run: |
          echo "═══════════════════════════════════════════"
          echo "🧪 SSH CONNECTION TEST"
          echo "═══════════════════════════════════════════"
          
          if ssh -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "whoami && pwd"; then
            echo "✅ SSH connection successful"
          else
            echo "❌ FAILED: Cannot connect to server"
            exit 1
          fi
          echo "═══════════════════════════════════════════"

      # ============================================
      # PRÉ-DEPLOY CHECKS
      # ============================================

      - name: 🔍 Pre-deployment checks
        run: |
          echo "═══════════════════════════════════════════"
          echo "🔍 PRE-DEPLOYMENT CHECKS"
          echo "═══════════════════════════════════════════"
          
          THEME_PATH="${{ env.THEME_PATH }}"
          WEB_ROOT="${{ env.WEB_ROOT }}"
          
          ssh -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} bash << 'PRECHECK'
          set -e
          
          THEME_PATH="/home/u790739895/public_html/wp-content/themes/zentheme"
          WEB_ROOT="/home/u790739895/public_html"
          
          echo "✅ Checking web root..."
          [ -d "$WEB_ROOT" ] || { echo "❌ Web root not found"; exit 1; }
          
          echo "✅ Checking .htaccess..."
          if [ -f "$WEB_ROOT/.htaccess" ]; then
            echo "   ✓ .htaccess found (will be preserved)"
            HTACCESS_SIZE=$(wc -c < "$WEB_ROOT/.htaccess")
            echo "   Size: $HTACCESS_SIZE bytes"
          else
            echo "   ⚠️  .htaccess not found (will not be modified)"
          fi
          
          echo "✅ Checking themes directory..."
          [ -d "$WEB_ROOT/wp-content/themes" ] || { echo "❌ Themes directory missing"; exit 1; }
          
          PRECHECK
          
          echo "═══════════════════════════════════════════"

      # ============================================
      # BACKUP CURRENT THEME & FILES
      # ============================================

      - name: 💾 Backup current theme & critical files
        run: |
          echo "═══════════════════════════════════════════"
          echo "💾 CREATING BACKUP"
          echo "═══════════════════════════════════════════"
          
          THEME_PATH="${{ env.THEME_PATH }}"
          BACKUP_PATH="${{ env.BACKUP_PATH }}"
          WEB_ROOT="${{ env.WEB_ROOT }}"
          
          ssh -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} bash << 'BACKUP'
          set -e
          
          THEME_PATH="/home/u790739895/public_html/wp-content/themes/zentheme"
          BACKUP_PATH="/home/u790739895/backups/theme"
          WEB_ROOT="/home/u790739895/public_html"
          BACKUP_TS=$(date +%Y%m%d_%H%M%S)
          
          mkdir -p "$BACKUP_PATH"
          
          # Backup tema
          if [ -d "$THEME_PATH" ]; then
            BACKUP_FILE="$BACKUP_PATH/theme_${BACKUP_TS}.tar.gz"
            echo "📦 Creating theme backup: theme_${BACKUP_TS}.tar.gz"
            tar -czf "$BACKUP_FILE" -C "$THEME_PATH" . 2>/dev/null || true
            
            if [ -f "$BACKUP_FILE" ]; then
              SIZE=$(du -sh "$BACKUP_FILE" | cut -f1)
              echo "✅ Theme backup created ($SIZE)"
            fi
          else
            echo "⚠️  Theme directory not found (first deployment?)"
          fi
          
          # Backup .htaccess
          if [ -f "$WEB_ROOT/.htaccess" ]; then
            HTACCESS_BACKUP="$BACKUP_PATH/.htaccess_${BACKUP_TS}"
            cp "$WEB_ROOT/.htaccess" "$HTACCESS_BACKUP"
            echo "✅ .htaccess backed up"
          fi
          
          # Cleanup: keep only 10 recent backups
          BACKUPS=$(cd "$BACKUP_PATH" 2>/dev/null && ls -t theme_*.tar.gz 2>/dev/null | tail -n +11 || true)
          if [ ! -z "$BACKUPS" ]; then
            echo "🗑️  Cleaning old theme backups..."
            echo "$BACKUPS" | xargs -r rm
          fi
          
          BACKUP
          
          echo "═══════════════════════════════════════════"

      # ============================================
      # DEPLOY THEME FILES
      # ============================================

      - name: 📤 Deploy theme files
        run: |
          echo "═══════════════════════════════════════════"
          echo "📤 DEPLOYING THEME"
          echo "═══════════════════════════════════════════"
          
          THEME_PATH="${{ env.THEME_PATH }}"
          
          ssh -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} bash << 'CREATE'
          THEME_PATH="/home/u790739895/public_html/wp-content/themes/zentheme"
          mkdir -p "$THEME_PATH"
          CREATE
          
          REMOTE_PATH="${{ env.SSH_USER }}@${{ env.SSH_HOST }}:/home/u790739895/public_html/wp-content/themes/zentheme"
          
          rsync -avz --checksum -e "ssh -p ${{ env.SSH_PORT }}" \
            --exclude='.git/' \
            --exclude='.gitignore' \
            --exclude='node_modules/' \
            --exclude='build/' \
            --exclude='dist/' \
            --exclude='src/' \
            --exclude='public/' \
            --exclude='.env*' \
            --exclude='*.md' \
            --exclude='.vscode/' \
            --exclude='.github/' \
            --exclude='scripts/' \
            --exclude='test/' \
            ./ "$REMOTE_PATH/" 2>&1 | grep -E "(^sending|files transferred|total size)" || true
          
          echo "✅ Theme files deployed"
          echo "═══════════════════════════════════════════"

      # ============================================
      # DEPLOY BUILD (dist/)
      # ============================================

      - name: 🎨 Deploy build (dist/)
        if: ${{ !inputs.skip_build }}
        run: |
          echo "═══════════════════════════════════════════"
          echo "🎨 DEPLOYING BUILD (dist/)"
          echo "═══════════════════════════════════════════"
          
          SIZE=$(du -sh dist | cut -f1)
          REMOTE_DIST="${{ env.SSH_USER }}@${{ env.SSH_HOST }}:/home/u790739895/public_html/wp-content/themes/zentheme/dist"
          
          echo "📦 Uploading build ($SIZE)..."
          
          rsync -avz --checksum --delete \
            -e "ssh -p ${{ env.SSH_PORT }}" \
            dist/ "$REMOTE_DIST/" 2>&1 | grep -E "(^sending|files transferred|total size)" || true
          
          echo "✅ Build deployed"
          echo "═══════════════════════════════════════════"

      # ============================================
      # DEPLOY ASSETS (favicon, robots.txt, etc)
      # ============================================

      - name: 📦 Deploy public assets
        run: |
          echo "═══════════════════════════════════════════"
          echo "📦 DEPLOYING PUBLIC ASSETS"
          echo "═══════════════════════════════════════════"
          
          WEB_ROOT="${{ env.WEB_ROOT }}"
          
          ssh -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} bash << 'ASSETS'
          WEB_ROOT="/home/u790739895/public_html"
          DEPLOYED_ANY=0
          
          # Deploy robots.txt (se existir no dist/)
          if [ -f "dist/robots.txt" ]; then
            cp dist/robots.txt "$WEB_ROOT/robots.txt"
            echo "✅ robots.txt deployed"
            DEPLOYED_ANY=1
          fi
          
          # Deploy favicon (se existir)
          if [ -f "dist/favicon.ico" ]; then
            cp dist/favicon.ico "$WEB_ROOT/favicon.ico"
            echo "✅ favicon.ico deployed"
            DEPLOYED_ANY=1
          fi
          
          if [ $DEPLOYED_ANY -eq 0 ]; then
            echo "ℹ️  No public assets to deploy"
          fi
          ASSETS
          
          echo "═══════════════════════════════════════════"

      # ============================================
      # DEPLOY PLUGINS
      # ============================================

      - name: 🔌 Deploy plugins
        if: hashFiles('plugins/**') != ''
        run: |
          echo "═══════════════════════════════════════════"
          echo "🔌 DEPLOYING PLUGINS"
          echo "═══════════════════════════════════════════"
          
          PLUGINS=$(find plugins -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)
          
          if [ -z "$PLUGINS" ]; then
            echo "ℹ️  No plugins found"
            echo "═══════════════════════════════════════════"
            exit 0
          fi
          
          for plugin in $PLUGINS; do
            echo "📦 Deploying: $plugin"
            
            rsync -avz -e "ssh -p ${{ env.SSH_PORT }}" \
              --exclude='.git/' \
              --exclude='node_modules/' \
              "plugins/$plugin/" \
              "${{ env.SSH_USER }}@${{ env.SSH_HOST }}:/home/u790739895/public_html/wp-content/plugins/$plugin/" \
              2>&1 | grep -E "(^sending|files transferred)" || true
          done
          
          echo "✅ Plugins deployed"
          echo "═══════════════════════════════════════════"

      # ============================================
      # DEPLOY SITEMAPS
      # ============================================

      - name: 📍 Deploy sitemaps
        if: hashFiles('dist/sitemap*.xml') != '' && ${{ !inputs.skip_build }}
        run: |
          echo "═══════════════════════════════════════════"
          echo "📍 DEPLOYING SITEMAPS"
          echo "═══════════════════════════════════════════"
          
          rsync -avz -e "ssh -p ${{ env.SSH_PORT }}" \
            --include='sitemap*.xml' \
            --include='robots.txt' \
            --exclude='*' \
            dist/ "${{ env.SSH_USER }}@${{ env.SSH_HOST }}:/home/u790739895/public_html/"
          
          echo "✅ Sitemaps deployed"
          echo "═══════════════════════════════════════════"

      # ============================================
      # FIX PERMISSIONS
      # ============================================

      - name: 🔐 Fix file permissions
        run: |
          echo "═══════════════════════════════════════════"
          echo "🔐 FIXING FILE PERMISSIONS"
          echo "═══════════════════════════════════════════"
          
          THEME_PATH="${{ env.THEME_PATH }}"
          
          ssh -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} bash << 'PERMS'
          THEME_PATH="/home/u790739895/public_html/wp-content/themes/zentheme"
          
          echo "📁 Setting directory permissions (755)..."
          find "$THEME_PATH" -type d -exec chmod 755 {} \;
          
          echo "📄 Setting file permissions (644)..."
          find "$THEME_PATH" -type f -exec chmod 644 {} \;
          
          echo "✅ Permissions fixed"
          PERMS
          
          echo "═══════════════════════════════════════════"

      # ============================================
      # VERIFY DEPLOYMENT
      # ============================================

      - name: ✅ Verify deployment on server
        run: |
          echo "═══════════════════════════════════════════"
          echo "✅ VERIFYING DEPLOYMENT"
          echo "═══════════════════════════════════════════"
          
          THEME_PATH="${{ env.THEME_PATH }}"
          WEB_ROOT="${{ env.WEB_ROOT }}"
          
          ssh -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} bash << 'VERIFY'
          THEME_PATH="/home/u790739895/public_html/wp-content/themes/zentheme"
          WEB_ROOT="/home/u790739895/public_html"
          
          echo ""
          echo "📍 Theme path: $THEME_PATH"
          echo ""
          
          # Step 1: Verify directory exists
          echo "Step 1: Checking theme directory..."
          if [ -d "$THEME_PATH" ]; then
            echo "✅ Theme directory exists"
          else
            echo "❌ Theme directory NOT FOUND"
            exit 1
          fi
          
          # Step 2: Check core files
          echo ""
          echo "Step 2: Checking core theme files..."
          
          if [ -f "$THEME_PATH/functions.php" ]; then
            LINES=$(wc -l < "$THEME_PATH/functions.php")
            echo "✅ functions.php found ($LINES lines)"
          else
            echo "❌ functions.php NOT FOUND - ROLLBACK NEEDED"
            exit 1
          fi
          
          if [ -f "$THEME_PATH/index.php" ]; then
            echo "✅ index.php found"
          else
            echo "❌ index.php NOT FOUND"
            exit 1
          fi
          
          if [ -f "$THEME_PATH/style.css" ]; then
            echo "✅ style.css found"
          else
            echo "❌ style.css NOT FOUND"
            exit 1
          fi
          
          # Step 3: Check .htaccess integrity
          echo ""
          echo "Step 3: Checking .htaccess integrity..."
          if [ -f "$WEB_ROOT/.htaccess" ]; then
            SIZE=$(wc -c < "$WEB_ROOT/.htaccess")
            echo "✅ .htaccess intact ($SIZE bytes)"
          else
            echo "⚠️  .htaccess not found"
          fi
          
          # Step 4: Check dist folder
          echo ""
          echo "Step 4: Checking dist folder..."
          
          if [ -d "$THEME_PATH/dist" ]; then
            DIST_SIZE=$(du -sh "$THEME_PATH/dist" | cut -f1)
            DIST_FILES=$(find "$THEME_PATH/dist" -type f | wc -l)
            echo "✅ dist/ found"
            echo "   Size: $DIST_SIZE"
            echo "   Files: $DIST_FILES"
            
            if [ -f "$THEME_PATH/dist/index.html" ]; then
              SIZE=$(wc -c < "$THEME_PATH/dist/index.html")
              echo "✅ dist/index.html exists ($SIZE bytes)"
            else
              echo "❌ dist/index.html NOT FOUND"
              exit 1
            fi
          else
            echo "❌ dist/ NOT FOUND"
            exit 1
          fi
          
          # Step 5: Check permissions
          echo ""
          echo "Step 5: Checking file permissions..."
          PERM=$(stat -c %a "$THEME_PATH" | head -c 3)
          if [ "$PERM" = "755" ]; then
            echo "✅ Directory permissions correct (755)"
          else
            echo "⚠️  Directory permissions: $PERM"
          fi
          
          echo ""
          echo "═══════════════════════════════════════════"
          echo "✅ ALL CHECKS PASSED!"
          echo "═══════════════════════════════════════════"
          VERIFY

      # ============================================
      # ROLLBACK ON FAILURE
      # ============================================

      - name: 🔄 Rollback on failure
        if: failure()
        run: |
          echo "═══════════════════════════════════════════"
          echo "🔄 ROLLBACK INITIATED"
          echo "═══════════════════════════════════════════"
          
          THEME_PATH="${{ env.THEME_PATH }}"
          BACKUP_PATH="${{ env.BACKUP_PATH }}"
          
          ssh -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} bash << 'ROLLBACK'
          THEME_PATH="/home/u790739895/public_html/wp-content/themes/zentheme"
          BACKUP_PATH="/home/u790739895/backups/theme"
          
          LATEST_BACKUP=$(ls -t "$BACKUP_PATH"/theme_*.tar.gz 2>/dev/null | head -1)
          
          if [ -z "$LATEST_BACKUP" ]; then
            echo "❌ No backup found for rollback"
            exit 1
          fi
          
          echo "📦 Restoring from: $(basename $LATEST_BACKUP)"
          rm -rf "$THEME_PATH"
          mkdir -p "$THEME_PATH"
          tar -xzf "$LATEST_BACKUP" -C "$THEME_PATH"
          
          echo "✅ Rollback completed"
          ROLLBACK
          
          echo "═══════════════════════════════════════════"

      # ============================================
      # CLEANUP
      # ============================================

      - name: 🧹 Cleanup SSH keys
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa ~/.ssh/config
          echo "✅ SSH keys cleaned"

  # ============================================
  # HEALTH CHECK
  # ============================================

  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'

    steps:
      - name: 🌐 Check site accessibility
        run: |
          echo "═══════════════════════════════════════════"
          echo "🏥 HEALTH CHECK - PRODUCTION"
          echo "═══════════════════════════════════════════"
          
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -L https://djzeneyer.com)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Site is accessible (HTTP $HTTP_CODE)"
          else
            echo "⚠️  HTTP $HTTP_CODE - Check server logs"
            exit 1
          fi
          echo "═══════════════════════════════════════════"

      - name: 🎉 Deployment Complete
        run: |
          echo "═══════════════════════════════════════════"
          echo "🎉 DEPLOYMENT SUCCESSFUL - v2.0"
          echo "═══════════════════════════════════════════"
          echo ""
          echo "✅ Build:        Complete"
          echo "✅ Theme:        Deployed"
          echo "✅ Plugins:      Deployed"
          echo "✅ Assets:       Deployed"
          echo "✅ Sitemaps:     Deployed"
          echo "✅ Permissions:  Fixed"
          echo "✅ Verification: Passed"
          echo "✅ Health Check: Passed"
          echo ""
          echo "🚀 Your site is LIVE!"
          echo "📍 https://djzeneyer.com"
          echo "📚 Backup: Automatic"
          echo "🔄 Rollback: Available"
          echo "═══════════════════════════════════════════"
